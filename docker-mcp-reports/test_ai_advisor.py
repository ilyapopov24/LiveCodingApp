#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Advisor MCP —Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from ai_advisor_mcp_server import GitHubAIAdvisorMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ai_advisor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI Advisor MCP —Å–µ—Ä–≤–µ—Ä"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['GITHUB_TOKEN', 'OPENAI_API_KEY']
    missing_vars = []
    
    for var in required_env_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        logger.info("–°–æ–∑–¥–∞—é AI Advisor MCP —Å–µ—Ä–≤–µ—Ä...")
        server = GitHubAIAdvisorMCPServer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É–ª—Å—ã
        logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É–ª—Å—ã...")
        tools = server.list_tools()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tools)} —Ç—É–ª—Å–æ–≤:")
        
        for tool in tools:
            logger.info(f"  - {tool['name']}: {tool['description']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        logger.info("\n–¢–µ—Å—Ç–∏—Ä—É—é analyze_profile...")
        test_username = "ilyapopov24"
        
        result = server.call_tool("analyze_profile", {"username": test_username})
        
        if result and result.get('content'):
            logger.info("‚úÖ analyze_profile –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['content'][0]['text'][:200]}...")
        else:
            logger.error("‚ùå analyze_profile –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º suggest_improvements
        logger.info("\n–¢–µ—Å—Ç–∏—Ä—É—é suggest_improvements...")
        result = server.call_tool("suggest_improvements", {
            "username": test_username,
            "focus_area": "repos"
        })
        
        if result and result.get('content'):
            logger.info("‚úÖ suggest_improvements –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['content'][0]['text'][:200]}...")
        else:
            logger.error("‚ùå suggest_improvements –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_goals
        logger.info("\n–¢–µ—Å—Ç–∏—Ä—É—é generate_goals...")
        result = server.call_tool("generate_goals", {
            "username": test_username,
            "timeframe": "medium"
        })
        
        if result and result.get('content'):
            logger.info("‚úÖ generate_goals –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['content'][0]['text'][:200]}...")
        else:
            logger.error("‚ùå generate_goals –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
        
        logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Advisor MCP —Å–µ—Ä–≤–µ—Ä–∞ ===")
    
    success = test_ai_advisor()
    
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)



