#!/usr/bin/env python3
"""
Python Runner MCP Server
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ Python —Ñ–∞–π–ª—ã
"""

import json
import subprocess
import logging
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PythonRunnerMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.tools = [
            {
                "name": "run-python-file",
                "description": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Python —Ñ–∞–π–ª",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
                        }
                    },
                    "required": ["file_path"]
                }
            }
        ]
    
    def list_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return self.tools
    
    def call_tool(self, name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if name == "run-python-file":
            return self.run_python_file(arguments)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")
    
    def run_python_file(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Ñ–∞–π–ª"""
        file_path = arguments.get("file_path")
        
        if not file_path:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    }
                ]
            }
        
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ Python —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Ñ–∞–π–ª
            result = subprocess.run(
                ["python3", file_path],
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.returncode == 0:
                output = result.stdout.strip()
                logger.info(f"–§–∞–π–ª {file_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚úÖ –§–∞–π–ª {file_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n**–í—ã–≤–æ–¥:**\n```\n{output}\n```"
                        }
                    ]
                }
            else:
                error_output = result.stderr.strip()
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {error_output}")
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}!\n\n**–ö–æ–¥ –æ—à–∏–±–∫–∏:** {result.returncode}\n\n**–û—à–∏–±–∫–∞:**\n```\n{error_output}\n```"
                        }
                    ]
                }
                
        except subprocess.TimeoutExpired:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path} (30 —Å–µ–∫—É–Ω–¥)"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }
