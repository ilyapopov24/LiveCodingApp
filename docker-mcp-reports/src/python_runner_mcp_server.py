#!/usr/bin/env python3
"""
Python Runner MCP Server
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ Python —Ñ–∞–π–ª—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑—É—è OpenAI
"""

import json
import subprocess
import logging
import tempfile
import os
import openai
import anthropic
import requests
import asyncio
import concurrent.futures
from typing import Dict, Any, List
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def debug_print(message: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ stdout –∏ stderr –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ Docker"""
    print(message)
    import sys
    sys.stderr.write(f"{message}\n")
    sys.stderr.flush()

class PythonRunnerMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv('docker-settings.env')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key or openai_api_key == 'your_openai_api_key_here':
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ docker.env —Ñ–∞–π–ª–µ!")
        
        openai.api_key = openai_api_key
        logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç
        anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
        if not anthropic_api_key or anthropic_api_key == 'your_anthropic_api_key_here':
            raise ValueError("ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ docker.env —Ñ–∞–π–ª–µ!")
        
        self.anthropic_client = anthropic.Anthropic(api_key=anthropic_api_key)
        logger.info("Anthropic API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        self.ollama_base_url = os.getenv('OLLAMA_BASE_URL', 'http://ollama-server:11434')
        logger.info(f"Ollama –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞: {self.ollama_base_url}")
        
        self.tools = [
            {
                "name": "run-python-file",
                "description": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Python —Ñ–∞–π–ª",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /host –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
                        }
                    },
                    "required": ["file_path"]
                }
            },
            {
                "name": "test-python-code",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI GPT-3.5-turbo –∏ Claude Haiku 3.5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /host –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
                        }
                    },
                    "required": ["file_path"]
                }
            },
            {
                "name": "fix-android-bug",
                "description": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Android –ø—Ä–æ–µ–∫—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–∞–≥ –∏—Å–ø–æ–ª—å–∑—É—è Claude AI",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "project_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Android –ø—Ä–æ–µ–∫—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /host/test-project)"
                        },
                        "bug_description": {
                            "type": "string",
                            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                        }
                    },
                    "required": ["project_path", "bug_description"]
                }
            },
            {
                "name": "build-android-pipeline",
                "description": "–ó–∞–ø—É—Å–∫–∞–µ—Ç Android debug build pipeline —á–µ—Ä–µ–∑ GitHub Actions",
                "inputSchema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            }
        ]

    def list_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(self.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return self.tools

    def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        logger.info(f"–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")
        
        try:
            if tool_name == "run-python-file":
                return self.run_python_file(arguments.get("file_path"))
            elif tool_name == "test-python-code":
                return self.test_python_code(arguments.get("file_path"))
            elif tool_name == "fix-android-bug":
                return self.fix_android_bug(
                    arguments.get("project_path"), 
                    arguments.get("bug_description")
                )
            elif tool_name == "build-android-pipeline":
                return self.build_android_pipeline()
            else:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
                        }
                    ]
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}"
                    }
                ]
            }



    def run_python_file(self, file_path: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            if not file_path:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                        }
                    ]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                        }
                    ]
                }
            
            logger.info(f"–ó–∞–ø—É—Å–∫ Python —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
            result = subprocess.run(
                ["python3", file_path],
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            output_text = f"üêç –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: {file_path}\n\n"
            
            if result.stdout:
                output_text += f"üì§ –í—ã–≤–æ–¥:\n{result.stdout}\n"
            
            if result.stderr:
                output_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∏:\n{result.stderr}\n"
            
            output_text += f"üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.returncode}"
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": output_text
                    }
                ]
            }
            
        except subprocess.TimeoutExpired:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }

    def test_python_code(self, file_path: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI"""
        try:
            if not file_path:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                        }
                    ]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                        }
                    ]
                }
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                source_code = f.read()
            
            logger.info(f"–§–∞–π–ª {file_path} –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(source_code)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–∏ –º–æ–¥–µ–ª–∏
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤ —Å OpenAI, Claude –∏ Ollama Qwen:06")
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏ –º–æ–¥–µ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                openai_future = executor.submit(self._generate_tests_with_openai, source_code, file_path)
                claude_future = executor.submit(self._generate_tests_with_claude, source_code, file_path)
                ollama_future = executor.submit(self._generate_tests_with_ollama, source_code, file_path)
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                try:
                    openai_test_code = openai_future.result(timeout=60)
                    openai_success = True
                    logger.info("OpenAI —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã")
                except Exception as e:
                    openai_test_code = None
                    openai_success = False
                    logger.error(f"OpenAI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã: {e}")
                
                try:
                    claude_test_code = claude_future.result(timeout=60)
                    claude_success = True
                    logger.info("Claude —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã")
                except Exception as e:
                    claude_test_code = None
                    claude_success = False
                    logger.error(f"Claude –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã: {e}")
                
                try:
                    ollama_test_code = ollama_future.result(timeout=120)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                    ollama_success = True
                    logger.info("Ollama Qwen:06 —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã")
                except Exception as e:
                    ollama_test_code = None
                    ollama_success = False
                    logger.error(f"Ollama –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            if not openai_success and not claude_success and not ollama_success:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}"
                        }
                    ]
                }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            results = []
            
            with tempfile.TemporaryDirectory() as temp_dir:
                # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                original_filename = os.path.basename(file_path)
                temp_original_file = os.path.join(temp_dir, original_filename)
                
                with open(file_path, 'r', encoding='utf-8') as src, open(temp_original_file, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
                
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {temp_dir}")
                logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {temp_original_file}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è OpenAI (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if openai_success and openai_test_code:
                    openai_test_file = os.path.join(temp_dir, f"test_openai_{original_filename}")
                    with open(openai_test_file, 'w', encoding='utf-8') as test_file:
                        test_file.write(openai_test_code)
                    
                    logger.info(f"–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ OpenAI —Å–æ–∑–¥–∞–Ω: {openai_test_file}")
                    openai_result = self._run_tests(openai_test_file, temp_original_file)
                    results.append(("OpenAI GPT-3.5-turbo", openai_result))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è Claude (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if claude_success and claude_test_code:
                    claude_test_file = os.path.join(temp_dir, f"test_claude_{original_filename}")
                    with open(claude_test_file, 'w', encoding='utf-8') as test_file:
                        test_file.write(claude_test_code)
                    
                    logger.info(f"–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ Claude —Å–æ–∑–¥–∞–Ω: {claude_test_file}")
                    claude_result = self._run_tests(claude_test_file, temp_original_file)
                    results.append(("Claude Haiku 3.5", claude_result))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è Ollama (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if ollama_success and ollama_test_code:
                    ollama_test_file = os.path.join(temp_dir, f"test_ollama_{original_filename}")
                    with open(ollama_test_file, 'w', encoding='utf-8') as test_file:
                        test_file.write(ollama_test_code)
                    
                    logger.info(f"–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ Ollama —Å–æ–∑–¥–∞–Ω: {ollama_test_file}")
                    ollama_result = self._run_tests(ollama_test_file, temp_original_file)
                    results.append(("Ollama Qwen:06", ollama_result))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            return self._create_comparison_report(file_path, results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }

    def _generate_tests_with_openai(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            openai_max_tokens = int(os.getenv('OPENAI_MAX_TOKENS', 2000))
            openai_temperature = float(os.getenv('OPENAI_TEMPERATURE', 0.3))
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã –¥–ª—è {file_path} –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API")
            logger.info(f"OpenAI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: max_tokens={openai_max_tokens}, temperature={openai_temperature}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            module_name = os.path.splitext(os.path.basename(file_path))[0]
            
            prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è pytest.

–í–ê–ñ–ù–û: 
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `test_module.`
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –º–æ–¥—É–ª—è '{module_name}' –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```python
{source_code}
```

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
2. –ü–û–ö–†–´–í–ê–Æ–¢ –í–°–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
3. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –í–∫–ª—é—á–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
5. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
6. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
7. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤—Å–µ –≤–µ—Ç–∫–∏ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
8. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
9. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
10. –¢–µ—Å—Ç–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
11. –ò—Å–ø–æ–ª—å–∑—É—é—Ç pytest
12. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤
13. –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
            
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è pytest."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=openai_max_tokens,
                temperature=openai_temperature
            )
            
            test_code = response.choices[0].message.content.strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if test_code.startswith("```python"):
                test_code = test_code[9:]
            if test_code.startswith("```"):
                test_code = test_code[3:]
            if test_code.endswith("```"):
                test_code = test_code[:-3]
            
            test_code = test_code.strip()
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI
            lines = test_code.split('\n')
            test_functions = []
            in_test_function = False
            current_function = []

            for line in lines:
                if line.strip().startswith('def test_'):
                    if current_function:
                        test_functions.append('\n'.join(current_function))
                    current_function = [line]
                    in_test_function = True
                elif in_test_function and line.strip() and not line.strip().startswith('#'):
                    current_function.append(line)
                elif in_test_function and line.strip().startswith('#'):
                    current_function.append(line)

            if current_function:
                test_functions.append('\n'.join(current_function))

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
            if test_functions:
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

{chr(10).join(test_functions)}
"""
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

def test_module_import():
    assert test_module is not None
"""
            
            logger.info(f"OpenAI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã: {test_code[:200]}...")
            logger.info(f"OpenAI API —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {file_path}")
            return test_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise e

    def _generate_tests_with_ollama(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è Ollama —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é Qwen:06"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            ollama_max_tokens = int(os.getenv('OLLAMA_MAX_TOKENS', 4000))
            ollama_temperature = float(os.getenv('OLLAMA_TEMPERATURE', 0.3))
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã –¥–ª—è {file_path} –∏—Å–ø–æ–ª—å–∑—É—è Ollama Llama2:7b")
            logger.info(f"Ollama –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: max_tokens={ollama_max_tokens}, temperature={ollama_temperature}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            module_name = os.path.splitext(os.path.basename(file_path))[0]
            
            prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è pytest.

–í–ê–ñ–ù–û: 
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `test_module.`
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –º–æ–¥—É–ª—è '{module_name}' –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```python
{source_code}
```

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
2. –ü–û–ö–†–´–í–ê–Æ–¢ –í–°–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
3. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –í–∫–ª—é—á–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
5. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
6. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
7. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤—Å–µ –≤–µ—Ç–∫–∏ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
8. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
9. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
10. –¢–µ—Å—Ç–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
11. –ò—Å–ø–æ–ª—å–∑—É—é—Ç pytest
12. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤
13. –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Ollama API: {self.ollama_base_url}")
            logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Ollama: {prompt[:200]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama API
            response = requests.post(
                f"{self.ollama_base_url}/api/generate",
                json={
                    "model": "llama2:7b",
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": ollama_temperature,
                        "num_predict": ollama_max_tokens,
                        "num_ctx": 8192
                    }
                },
                timeout=300
            )
            
            logger.info(f"Ollama –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
            
            if response.status_code != 200:
                logger.error(f"Ollama API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                raise Exception(f"Ollama API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
            response_data = response.json()
            logger.info(f"Ollama response_data: {str(response_data)[:200]}...")
            test_code = response_data.get("response", "").strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if test_code.startswith("```python"):
                test_code = test_code[9:]
            if test_code.startswith("```"):
                test_code = test_code[3:]
            if test_code.endswith("```"):
                test_code = test_code[:-3]
            
            test_code = test_code.strip()
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ Ollama
            lines = test_code.split('\n')
            test_functions = []
            in_test_function = False
            current_function = []

            for line in lines:
                if line.strip().startswith('def test_'):
                    if current_function:
                        test_functions.append('\n'.join(current_function))
                    current_function = [line]
                    in_test_function = True
                elif in_test_function and line.strip() and not line.strip().startswith('#'):
                    current_function.append(line)
                elif in_test_function and line.strip().startswith('#'):
                    current_function.append(line)

            if current_function:
                test_functions.append('\n'.join(current_function))

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
            if test_functions:
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

{chr(10).join(test_functions)}
"""
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

def test_module_import():
    assert test_module is not None
"""
            
            logger.info(f"Ollama Llama2:7b —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã: {test_code[:200]}...")
            logger.info(f"Ollama API —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {file_path}")
            return test_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Ollama API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise e

    def _generate_tests_with_claude(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è Claude Haiku 3.5"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            anthropic_max_tokens = int(os.getenv('ANTHROPIC_MAX_TOKENS', 2000))
            anthropic_temperature = float(os.getenv('ANTHROPIC_TEMPERATURE', 0.3))
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã –¥–ª—è {file_path} –∏—Å–ø–æ–ª—å–∑—É—è Claude Haiku 3.5")
            logger.info(f"Claude –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: max_tokens={anthropic_max_tokens}, temperature={anthropic_temperature}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            module_name = os.path.splitext(os.path.basename(file_path))[0]
            
            prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è pytest.

–í–ê–ñ–ù–û: 
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `test_module.`
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –º–æ–¥—É–ª—è '{module_name}' –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```python
{source_code}
```

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`
2. –ü–û–ö–†–´–í–ê–Æ–¢ –í–°–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
3. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –í–∫–ª—é—á–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
5. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
6. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
7. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤—Å–µ –≤–µ—Ç–∫–∏ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
8. –î–æ–±–∞–≤–ª—è—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
9. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
10. –¢–µ—Å—Ç–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
11. –ò—Å–ø–æ–ª—å–∑—É—é—Ç pytest
12. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤
13. –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
            
            response = self.anthropic_client.messages.create(
                model="claude-3-5-haiku-20241022",
                max_tokens=anthropic_max_tokens,
                temperature=anthropic_temperature,
                messages=[
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ]
            )
            
            test_code = response.content[0].text.strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if test_code.startswith("```python"):
                test_code = test_code[9:]
            if test_code.startswith("```"):
                test_code = test_code[3:]
            if test_code.endswith("```"):
                test_code = test_code[:-3]
            
            test_code = test_code.strip()
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude
            lines = test_code.split('\n')
            test_functions = []
            in_test_function = False
            current_function = []

            for line in lines:
                if line.strip().startswith('def test_'):
                    if current_function:
                        test_functions.append('\n'.join(current_function))
                    current_function = [line]
                    in_test_function = True
                elif in_test_function and line.strip() and not line.strip().startswith('#'):
                    current_function.append(line)
                elif in_test_function and line.strip().startswith('#'):
                    current_function.append(line)

            if current_function:
                test_functions.append('\n'.join(current_function))

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
            if test_functions:
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

{chr(10).join(test_functions)}
"""
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

def test_module_import():
    assert test_module is not None
"""
            
            logger.info(f"Claude —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã: {test_code[:200]}...")
            logger.info(f"Claude API —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {file_path}")
            return test_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Claude API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise e

    def _create_comparison_report(self, file_path: str, results: list) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            original_filename = os.path.basename(file_path)
            
            report = f"ü§ñ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞: {original_filename}\n\n"
            
            summary_data = []
            
            for model_name, result in results:
                report += f"{'='*60}\n"
                report += f"üìä {model_name}:\n"
                report += f"{'='*60}\n"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = result.get("content", [{}])[0].get("text", "")
                report += result_text + "\n\n"
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏
                if "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!" in result_text:
                    summary_data.append((model_name, "‚úÖ –£—Å–ø–µ—à–Ω–æ", "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"))
                elif "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å" in result_text:
                    summary_data.append((model_name, "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ", "–ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã"))
                elif "üí• –û—à–∏–±–∫–∞" in result_text or "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç" in result_text:
                    summary_data.append((model_name, "‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"))
                else:
                    summary_data.append((model_name, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            if len(summary_data) > 1:
                report += f"{'='*60}\n"
                report += f"üìà –°–í–û–î–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø:\n"
                report += f"{'='*60}\n"
                
                for model_name, status, description in summary_data:
                    report += f"{status} {model_name}: {description}\n"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                successful_models = [data for data in summary_data if data[1] == "‚úÖ –£—Å–ø–µ—à–Ω–æ"]
                if len(successful_models) == 1:
                    winner = successful_models[0][0]
                    report += f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {winner}\n"
                elif len(successful_models) > 1:
                    report += f"\nü§ù –û–±–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n"
                else:
                    partial_models = [data for data in summary_data if data[1] == "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ"]
                    if partial_models:
                        report += f"\n‚ö†Ô∏è –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö: {partial_models[0][0]}\n"
                    else:
                        report += f"\nüòû –û–±–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–µ—Å—Ç—ã\n"
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": report
                    }
                ]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}"
                    }
                ]
            }

    def fix_android_bug(self, project_path: str, bug_description: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Android –ø—Ä–æ–µ–∫—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–∞–≥ –∏—Å–ø–æ–ª—å–∑—É—è Claude AI"""
        
        # –ü–†–û–°–¢–û–ô PRINT –î–õ–Ø –õ–û–ì–û–í –í DOCKER
        print("="*50)
        print("üöÄ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø fix-android-bug")
        print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {project_path}")
        print(f"üêõ –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞: {bug_description}")
        print("="*50)
        
        try:
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î –ù–ê–°–¢–†–û–ï–ö –ù–ï–ô–†–û–ù–ö–ò
            debug_print("üöÄ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø fix-android-bug")
            debug_print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {project_path}")
            debug_print(f"üêõ –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞: {bug_description}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ–Ω–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            anthropic_temperature = os.getenv('ANTHROPIC_TEMPERATURE', '0.8')
            anthropic_max_tokens = os.getenv('ANTHROPIC_MAX_TOKENS', '4000')
            debug_print(f"üå°Ô∏è ANTHROPIC_TEMPERATURE: {anthropic_temperature}")
            debug_print(f"üéØ ANTHROPIC_MAX_TOKENS: {anthropic_max_tokens}")
            
            # –î–£–ë–õ–ò–†–£–ï–ú –í PRINT –î–õ–Ø DOCKER –õ–û–ì–û–í
            print(f"üå°Ô∏è ANTHROPIC_TEMPERATURE: {anthropic_temperature}")
            print(f"üéØ ANTHROPIC_MAX_TOKENS: {anthropic_max_tokens}")
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ Android –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
            logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞: {bug_description}")
            
            if not project_path or not bug_description:
                error_msg = "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞"
                debug_print(error_msg)
                print(error_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": error_msg
                        }
                    ]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if not os.path.exists(project_path):
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_path}"
                debug_print(error_msg)
                print(error_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": error_msg
                        }
                    ]
                }
            
            success_msg = "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤..."
            debug_print(success_msg)
            print(success_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            project_files = self._collect_android_project_files(project_path)
            
            if not project_files:
                error_msg = "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"
                debug_print(error_msg)
                print(error_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": error_msg
                        }
                    ]
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç
            debug_print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–∑ _collect_android_project_files
            debug_print(f"   –í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑: {len(project_files)}")
            print(f"   –í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑: {len(project_files)}")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            
            success_msg = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(project_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            debug_print(success_msg)
            print(success_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(project_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Claude AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            debug_print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Claude AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Claude AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            fixed_code = self._analyze_and_fix_with_claude(project_files, bug_description)
            
            debug_print("‚úÖ Claude AI –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑")
            print("‚úÖ Claude AI –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": fixed_code
                    }
                ]
            }
            
        except Exception as e:
            error_msg = f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}"
            debug_print(error_msg)
            print(error_msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ print
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Android –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": error_msg
                    }
                ]
            }

    def _collect_android_project_files(self, project_path: str) -> Dict[str, str]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã Android –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        project_files = {}
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)
        extensions = ['.kt', '.java']  # –£–±–∏—Ä–∞–µ–º .xml, .gradle - –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–≥–∞
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤)
        EXCLUDED_DIRS = ['build', '.gradle', 'gradle', '.idea', '__pycache__', '~', 
                        'node_modules', '.git', 'target', 'bin', 'obj', 'Debug', 'Release']
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        total_files = 0
        excluded_count = 0
        
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
        
        for root, dirs, files in os.walk(project_path):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
            dirs[:] = [d for d in dirs if not (
                d.startswith('.') or 
                d in ['build', 'gradle', '.gradle', 'node_modules', 'target', 'bin', 'obj'] or
                d in EXCLUDED_DIRS
            )]
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ root
            rel_root = os.path.relpath(root, project_path)
            if any(excluded_dir in rel_root.split(os.sep) for excluded_dir in EXCLUDED_DIRS):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                continue
            
            for file in files:
                total_files += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if not any(file.endswith(ext) for ext in extensions):
                    excluded_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_path)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
                if any(excluded_dir in rel_path.split(os.sep) for excluded_dir in EXCLUDED_DIRS):
                    excluded_count += 1
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –£–ú–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–≥–∞
                    if any(exclude_pattern in rel_path.lower() for exclude_pattern in [
                        'test', 'androidtest', 'example', 'drawable', 'values', 'mipmap', 
                        'xml/', 'res/', 'config', 'rules', 'security', 'backup'
                    ]):
                        excluded_count += 1
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                    project_files[rel_path] = content
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                    excluded_count += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        logger.info(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        logger.info(f"   –ò—Å–∫–ª—é—á–µ–Ω–æ: {excluded_count}")
        logger.info(f"   –í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑: {len(project_files)}")
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–æ: {excluded_count}")
        print(f"   –í–∫–ª—é—á–µ–Ω–æ –≤ –∞–Ω–∞–ª–∏–∑: {len(project_files)}")
        
        return project_files

    def _analyze_and_fix_with_claude(self, project_files: Dict[str, str], bug_description: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥ –∏—Å–ø–æ–ª—å–∑—É—è Claude AI"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            project_summary = "\n".join([f"üìÅ {path}:\n```\n{content}\n```" for path, content in project_files.items()])
            
            prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π Android –ø—Ä–æ–µ–∫—Ç –∏ –∏—Å–ø—Ä–∞–≤—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–∞–≥.

–û–ü–ò–°–ê–ù–ò–ï –ë–ê–ì–ê:
{bug_description}

–ò–°–•–û–î–ù–´–ô –ö–û–î –ü–†–û–ï–ö–¢–ê:
{project_summary}

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –Ω–∞–π–¥–∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–≥–∞
2. –ü—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
3. –ü–æ–∫–∞–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Android API –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ –∫–ª–∞—Å—Å—ã
- –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- –ü–æ–∫–∞–∂–∏ diff –∏–∑–º–µ–Ω–µ–Ω–∏–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üîç –ê–ù–ê–õ–ò–ó –ë–ê–ì–ê:
[–¢–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã]

üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
[–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è]

üìù –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:
[–ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏]

‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:
[–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å]
"""
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            anthropic_max_tokens = int(os.getenv('ANTHROPIC_MAX_TOKENS', 4000))
            anthropic_temperature = float(os.getenv('ANTHROPIC_TEMPERATURE', 0.8))
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ Docker
            debug_print(f"üîß Claude AI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: max_tokens={anthropic_max_tokens}, temperature={anthropic_temperature}")
            debug_print(f"üìè –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            debug_print(f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(project_files)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Claude AI
            response = self.anthropic_client.messages.create(
                model="claude-3-5-haiku-20241022",
                max_tokens=anthropic_max_tokens,
                temperature=anthropic_temperature,
                messages=[
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ]
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
            if hasattr(response, 'usage'):
                input_tokens = getattr(response.usage, 'input_tokens', 0)
                output_tokens = getattr(response.usage, 'output_tokens', 0)
                total_tokens = getattr(response.usage, 'total_tokens', 0)
                
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (Claude Haiku 3.5: $0.25/1M input, $1.25/1M output)
                estimated_cost = (input_tokens * 0.25 / 1_000_000) + (output_tokens * 1.25 / 1_000_000)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
                debug_print(f"üéØ –¢–æ–∫–µ–Ω—ã Claude AI: input={input_tokens}, output={output_tokens}, total={total_tokens}")
                debug_print(f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_cost:.6f}")
            else:
                debug_print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ Claude AI")
            
            result = response.content[0].text.strip()
            logger.info(f"Claude AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude AI: {str(e)}")
            return f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude AI: {str(e)}"

    def build_android_pipeline(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Android debug build pipeline"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Android debug build pipeline")
            
            # –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ volume mount
            project_path = "/host"
            workflow_file = os.path.join(project_path, ".github/workflows/android-debug-build.yml")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ workflow —Ñ–∞–π–ª–∞
            if not os.path.exists(workflow_file):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå Workflow —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: .github/workflows/android-debug-build.yml"
                        }
                    ]
                }
            
            # –ü–æ–ª—É—á–∞–µ–º GitHub —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            github_token = os.getenv('GITHUB_TOKEN')
            if not github_token:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∫–∏."
                        }
                    ]
                }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow —á–µ—Ä–µ–∑ GitHub API
            try:
                logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PyGithub...")
                from github import Github
                logger.info("PyGithub –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GitHub –∫–ª–∏–µ–Ω—Ç
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GitHub –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º: {github_token[:10]}...")
                g = Github(github_token)
                logger.info("GitHub –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ git config
                git_config_path = os.path.join(project_path, ".git/config")
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º git config: {git_config_path}")
                
                if os.path.exists(git_config_path):
                    logger.info("Git config –Ω–∞–π–¥–µ–Ω, —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
                    with open(git_config_path, 'r') as f:
                        config_content = f.read()
                    logger.info(f"Git config —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {config_content[:200]}...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    import re
                    url_match = re.search(r'url\s*=\s*(https://github\.com/[^/]+/[^/]+\.git)', config_content)
                    if url_match:
                        repo_url = url_match.group(1)
                        repo_name = repo_url.replace('https://github.com/', '').replace('.git', '')
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                        logger.info("–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
                        repo = g.get_repo(repo_name)
                        logger.info(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—É—á–µ–Ω: {repo.full_name}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º workflow —á–µ—Ä–µ–∑ gh CLI (–Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
                        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º workflow —á–µ—Ä–µ–∑ gh CLI...")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess –¥–ª—è –≤—ã–∑–æ–≤–∞ gh CLI
                        import subprocess
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º gh api –¥–ª—è repository_dispatch
                        result = subprocess.run([
                            "gh", "api", f"repos/{repo_name}/dispatches",
                            "--method", "POST",
                            "-f", "event_type=android-debug-build"
                        ], capture_output=True, text=True, timeout=30)
                        
                        if result.returncode == 0:
                            logger.info("Workflow –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ gh CLI repository_dispatch —É—Å–ø–µ—à–Ω–æ!")
                            return {
                                "content": [
                                    {
                                        "type": "text",
                                        "text": f"‚úÖ Android debug build pipeline –∑–∞–ø—É—â–µ–Ω!\n\nüì± –°–±–æ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_name}\nüîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: https://github.com/{repo_name}/actions"
                                    }
                                ]
                            }
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ gh CLI: {result.stderr}")
                            # Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API repository_dispatch
                            logger.info("–ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ GitHub API repository_dispatch...")
                            try:
                                repo.create_repository_dispatch("android-debug-build", {})
                                logger.info("Workflow –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ API repository_dispatch —É—Å–ø–µ—à–Ω–æ!")
                                return {
                                    "content": [
                                        {
                                            "type": "text",
                                            "text": f"‚úÖ Android debug build pipeline –∑–∞–ø—É—â–µ–Ω!\n\nüì± –°–±–æ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_name}\nüîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: https://github.com/{repo_name}/actions"
                                        }
                                    ]
                                }
                            except Exception as api_error:
                                logger.error(f"–û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ API: {api_error}")
                                return {
                                    "content": [
                                        {
                                            "type": "text",
                                            "text": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: https://github.com/{repo_name}/actions"
                                        }
                                    ]
                                }
                    
            except ImportError:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå PyGithub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyGithub"
                        }
                    ]
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow —á–µ—Ä–µ–∑ GitHub API: {str(e)}")
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:\n1. GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Üí Actions\n2. –í—ã–±–µ—Ä–∏—Ç–µ 'Android Debug Build'\n3. –ù–∞–∂–º–∏—Ç–µ 'Run workflow'"
                        }
                    ]
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Android build pipeline: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Android build pipeline: {str(e)}"
                    }
                ]
            }

    def _run_tests(self, test_file: str, original_file: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {test_file}")
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_file}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            with open(test_file, 'r', encoding='utf-8') as f:
                test_content = f.read()
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {test_content[:500]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            test_dir = os.path.dirname(test_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
            result = subprocess.run(
                ["python3", "-m", "pytest", test_file, "-v", "--tb=short"],
                capture_output=True,
                text=True,
                timeout=60,  # –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                cwd=test_dir  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
            )
            
            output_text = f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {os.path.basename(original_file)}\n\n"
            
            if result.stdout:
                output_text += f"üì§ –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:\n{result.stdout}\n"
            
            if result.stderr:
                output_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤:\n{result.stderr}\n"
            
            output_text += f"üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.returncode}\n"
            
            if result.returncode == 0:
                output_text += "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
            else:
                output_text += "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": output_text
                    }
                ]
            }
            
        except subprocess.TimeoutExpired:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}"
                    }
                ]
            }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = PythonRunnerMCPServer()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    logger.info("Python Runner MCP Server –∑–∞–ø—É—â–µ–Ω")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º MCP —Å–µ—Ä–≤–µ—Ä–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –∏–∑ stdin
    # –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ stdout
    
if __name__ == "__main__":
    main()
