#!/usr/bin/env python3
"""
Python Runner MCP Server
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ Python —Ñ–∞–π–ª—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–∏—Ö
"""

import json
import subprocess
import logging
import ast
import tempfile
import os
import openai
from typing import Dict, Any, List
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PythonRunnerMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv('docker.env')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key or api_key == 'your_openai_api_key_here':
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ docker.env —Ñ–∞–π–ª–µ!")
        
        openai.api_key = api_key
        logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        self.tools = [
            {
                "name": "run-python-file",
                "description": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Python —Ñ–∞–π–ª",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
                        }
                    },
                    "required": ["file_path"]
                }
            },
            {
                "name": "test-python-code",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /host –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
                        }
                    },
                    "required": ["file_path"]
                }
            }
        ]
    
    def list_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return self.tools
    
    def call_tool(self, name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if name == "run-python-file":
            return self.run_python_file(arguments)
        elif name == "test-python-code":
            return self.test_python_code(arguments)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")
    
    def run_python_file(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Ñ–∞–π–ª"""
        file_path = arguments.get("file_path")
        
        if not file_path:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    }
                ]
            }
        
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ Python —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Ñ–∞–π–ª
            result = subprocess.run(
                ["python3", file_path],
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.returncode == 0:
                output = result.stdout.strip()
                logger.info(f"–§–∞–π–ª {file_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚úÖ –§–∞–π–ª {file_path} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n**–í—ã–≤–æ–¥:**\n```\n{output}\n```"
                        }
                    ]
                }
            else:
                error_output = result.stderr.strip()
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {error_output}")
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}!\n\n**–ö–æ–¥ –æ—à–∏–±–∫–∏:** {result.returncode}\n\n**–û—à–∏–±–∫–∞:**\n```\n{error_output}\n```"
                        }
                    ]
                }
                
        except subprocess.TimeoutExpired:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path} (30 —Å–µ–∫—É–Ω–¥)"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }
    
    def test_python_code(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞"""
        file_path = arguments.get("file_path")
        
        if not file_path:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    }
                ]
            }
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                        }
                    ]
                }
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                source_code = f.read()
            
            logger.info(f"–§–∞–π–ª {file_path} –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(source_code)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
            test_code = self._generate_tests(source_code, file_path)
            
            if not test_code:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                        }
                    ]
                }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                original_filename = os.path.basename(file_path)
                temp_original_file = os.path.join(temp_dir, original_filename)
                
                with open(file_path, 'r', encoding='utf-8') as src, open(temp_original_file, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                test_filename = f"test_{original_filename}"
                temp_test_file = os.path.join(temp_dir, test_filename)
                
                with open(temp_test_file, 'w', encoding='utf-8') as test_file:
                    test_file.write(test_code)
                
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {temp_dir}")
                logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {temp_original_file}")
                logger.info(f"–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {temp_test_file}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
                test_result = self._run_tests(temp_test_file, temp_original_file)
            
            return test_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }
    
    def _generate_tests(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Python –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI"""
        return self._generate_tests_with_openai(source_code, file_path)
    
    def _generate_tests_with_openai(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã –¥–ª—è {file_path} –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
            prompt = f"""–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ Python —Ç–µ—Å—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞. 

–§–∞–π–ª: {file_path}

–ö–æ–¥:
```python
{source_code}
```

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∞–º:
1. –ò—Å–ø–æ–ª—å–∑—É–π pytest
2. –ü–æ–∫—Ä–æ–π –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
3. –í–∫–ª—é—á–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
4. –î–æ–±–∞–≤—å —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
5. –ò—Å–ø–æ–ª—å–∑—É–π assert –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
6. –î–æ–±–∞–≤—å docstring –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
7. –û–±—Ä–∞–±–æ—Ç–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
8. –°–¥–µ–ª–∞–π —Ç–µ—Å—Ç—ã —á–∏—Ç–∞–µ–º—ã–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏
9. –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `test_module` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º
10. –ù–∞–ø—Ä–∏–º–µ—Ä: `test_module.add(1, 2)` –∏–ª–∏ `test_module.Calculator()`
11. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `test_module.`
12. –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pytest."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=4000,
                temperature=0.3
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            test_code = response.choices[0].message.content.strip()
            
            logger.info(f"OpenAI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã: {test_code[:200]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            full_test_code = f"""#!/usr/bin/env python3
\"\"\"
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ OpenAI API
\"\"\"

import sys
import os
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º —Ñ–∞–π–ª–æ–º
sys.path.insert(0, os.path.dirname(os.path.abspath('{file_path}')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    module_name = os.path.splitext(os.path.basename('{file_path}'))[0]
    test_module = __import__(module_name)
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {{module_name}}: {{e}}")
    print(f"–ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: {{os.path.abspath('{file_path}')}}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—è: {{os.path.dirname(os.path.abspath('{file_path}'))}}")
    print(f"sys.path: {{sys.path}}")
    sys.exit(1)

{test_code}

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    pytest.main([__file__, "-v"])
"""
            
            logger.info(f"OpenAI API —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {file_path}")
            return full_test_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise e
    
    def _run_tests(self, test_file: str, original_file: str) -> Dict[str, Any]:
        """Fallback –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        try:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é fallback –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {file_path}")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = ast.parse(source_code)
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ
            module_functions = []  # –§—É–Ω–∫—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
            classes = []  # –ö–ª–∞—Å—Å—ã —Å –∏—Ö –º–µ—Ç–æ–¥–∞–º–∏
            imports = []  # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∑–ª—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            for node in tree.body:
                if isinstance(node, ast.FunctionDef):
                    # –§—É–Ω–∫—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
                    func_info = self._analyze_function(node)
                    module_functions.append(func_info)
                elif isinstance(node, ast.ClassDef):
                    # –ö–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏
                    class_info = self._analyze_class(node)
                    classes.append(class_info)
                elif isinstance(node, ast.Import) or isinstance(node, ast.ImportFrom):
                    # –ò–º–ø–æ—Ä—Ç—ã
                    imports.append(node)
            
            if not module_functions and not classes:
                logger.warning(f"–í —Ñ–∞–π–ª–µ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return ""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
            test_code = f"""#!/usr/bin/env python3
\"\"\"
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}
–ü–æ–∫—Ä—ã—Ç–∏–µ: —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è, –∫–ª–∞—Å—Å—ã, –º–µ—Ç–æ–¥—ã, –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
\"\"\"

import sys
import os
import pytest
import inspect

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º —Ñ–∞–π–ª–æ–º
sys.path.insert(0, os.path.dirname(os.path.abspath('{file_path}')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    module_path = os.path.abspath('{file_path}')
    module_dir = os.path.dirname(module_path)
    module_name = os.path.splitext(os.path.basename(module_path))[0]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥—É–ª—è –≤ –ø—É—Ç—å
    if module_dir not in sys.path:
        sys.path.insert(0, module_dir)
    
    test_module = __import__(module_name)
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {{module_name}}: {{e}}")
    print(f"–ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: {{module_path}}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—è: {{module_dir}}")
    print(f"sys.path: {{sys.path}}")
    sys.exit(1)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def generate_test_value_for_arg(arg_name):
    \"\"\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏\"\"\"
    arg_lower = arg_name.lower()
    
    if 'number' in arg_lower or 'num' in arg_lower or 'value' in arg_lower:
        return 42
    elif 'string' in arg_lower or 'text' in arg_lower or 'name' in arg_lower:
        return "test_string"
    elif 'list' in arg_lower or 'array' in arg_lower:
        return [1, 2, 3]
    elif 'dict' in arg_lower or 'map' in arg_lower:
        return {{"key": "value"}}
    elif 'bool' in arg_lower or 'flag' in arg_lower:
        return True
    elif 'file' in arg_lower or 'path' in arg_lower:
        return "/tmp/test_file.txt"
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ
        return 42

def generate_test_args_for_function(func_name, args, defaults):
    \"\"\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏\"\"\"
    test_args = []
    
    for i, arg in enumerate(args):
        if i < len(defaults):
            # –ï—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                test_args.append(eval(defaults[i]))
            except:
                test_args.append(generate_test_value_for_arg(arg))
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            test_args.append(generate_test_value_for_arg(arg))
    
    return test_args

def generate_test_args_for_class(class_name, args):
    \"\"\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞\"\"\"
    test_args = []
    
    for arg in args:
        test_args.append(generate_test_value_for_arg(arg))
    
    return test_args

def generate_test_args_for_method(class_name, method_name, args, defaults):
    \"\"\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞\"\"\"
    test_args = []
    
    for i, arg in enumerate(args):
        if i < len(defaults):
            # –ï—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                test_args.append(eval(defaults[i]))
            except:
                test_args.append(generate_test_value_for_arg(arg))
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            test_args.append(generate_test_value_for_arg(arg))
    
    return test_args

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è
            for func_info in module_functions:
                test_code += self._generate_function_tests(func_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
            for class_info in classes:
                test_code += self._generate_class_tests(class_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            test_code += self._generate_integration_tests(module_functions, classes)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è
            test_code += f"""
def test_module_import():
    \"\"\"–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è\"\"\"
    try:
        assert test_module is not None
        print(f"‚úÖ –ú–æ–¥—É–ª—å {{module_name}} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

def test_module_structure():
    \"\"\"–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è\"\"\"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    expected_functions = {[f['name'] for f in module_functions]}
    expected_classes = {[c['name'] for c in classes]}
    
    for func_name in expected_functions:
        assert hasattr(test_module, func_name), f"–§—É–Ω–∫—Ü–∏—è {{func_name}} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ"
        assert callable(getattr(test_module, func_name)), f"{{func_name}} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"
    
    for class_name in expected_classes:
        assert hasattr(test_module, class_name), f"–ö–ª–∞—Å—Å {{class_name}} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ"
        class_obj = getattr(test_module, class_name)
        assert isinstance(class_obj, type), f"{{class_name}} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–æ–º"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    pytest.main([__file__, "-v"])
"""
            
            logger.info(f"Fallback –∞–ª–≥–æ—Ä–∏—Ç–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {len(module_functions)} —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è –∏ {len(classes)} –∫–ª–∞—Å—Å–æ–≤")
            return test_code
            
        except SyntaxError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return ""
    
    def _analyze_function(self, func_node: ast.FunctionDef) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        func_info = {
            'name': func_node.name,
            'args': [],
            'defaults': [],
            'docstring': ast.get_docstring(func_node),
            'has_return': False,
            'complexity': 0
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in func_node.args.args:
            func_info['args'].append(arg.arg)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if func_node.args.defaults:
            func_info['defaults'] = [ast.unparse(default) for default in func_node.args.defaults]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ return
        for node in ast.walk(func_node):
            if isinstance(node, ast.Return):
                func_info['has_return'] = True
                break
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        func_info['complexity'] = len(list(ast.walk(func_node)))
        
        return func_info
    
    def _analyze_class(self, class_node: ast.ClassDef) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        class_info = {
            'name': class_node.name,
            'methods': [],
            'docstring': ast.get_docstring(class_node),
            'has_init': False,
            'init_args': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞
        for node in class_node.body:
            if isinstance(node, ast.FunctionDef):
                method_info = self._analyze_function(node)
                class_info['methods'].append(method_info)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
                if node.name == '__init__':
                    class_info['has_init'] = True
                    class_info['init_args'] = method_info['args'][1:]  # –ò—Å–∫–ª—é—á–∞–µ–º self
        
        return class_info
    
    def _generate_function_tests(self, func_info: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        func_name = func_info['name']
        args = func_info['args']
        defaults = func_info['defaults']
        has_return = func_info['has_return']
        
        test_code = f"""
def test_{func_name}_function():
    \"\"\"–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}\"\"\"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assert hasattr(test_module, '{func_name}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
        func = getattr(test_module, '{func_name}')
        assert callable(func)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        sig = inspect.signature(func)
        assert len(sig.parameters) == {len(args)}, f"–§—É–Ω–∫—Ü–∏—è {func_name} –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å {len(args)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É")
        
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

def test_{func_name}_execution():
    \"\"\"–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}\"\"\"
    try:
        func = getattr(test_module, '{func_name}')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        test_args = generate_test_args_for_function('{func_name}', {args}, {defaults})
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if test_args:
            result = func(*test_args)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
            if {has_return}:
                assert result is not None, f"–§—É–Ω–∫—Ü–∏—è {func_name} –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {{test_args}}")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}")
            
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

def test_{func_name}_logic():
    \"\"\"–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}\"\"\"
    try:
        func = getattr(test_module, '{func_name}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        if '{func_name}' == 'add':
            result = func(5, 3)
            assert result == 8, f"add(5, 3) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 8, –∞ –Ω–µ {{result}}"
            print(f"‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: add(5, 3) = {{result}}")
            
        elif '{func_name}' == 'subtract':
            result = func(10, 4)
            assert result == 6, f"subtract(10, 4) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 6, –∞ –Ω–µ {{result}}"
            print(f"‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: subtract(10, 4) = {{result}}")
            
        elif '{func_name}' == 'multiply':
            result = func(6, 7)
            assert result == 42, f"multiply(6, 7) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 42, –∞ –Ω–µ {{result}}"
            print(f"‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: multiply(6, 7) = {{result}}")
            
        elif '{func_name}' == 'divide':
            result = func(20, 5)
            assert result == 4, f"divide(20, 5) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4, –∞ –Ω–µ {{result}}"
            print(f"‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: divide(20, 5) = {{result}}")
            
        elif '{func_name}' == 'main':
            # –î–ª—è main —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
            result = func()
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")
            
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            test_args = generate_test_args_for_function('{func_name}', {args}, {defaults})
            if test_args:
                result = func(*test_args)
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {{result}}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}")
                
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

"""
        
        return test_code
    
    def _generate_class_tests(self, class_info: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞"""
        class_name = class_info['name']
        methods = class_info['methods']
        has_init = class_info['has_init']
        init_args = class_info['init_args']
        
        test_code = f"""
def test_{class_name}_class():
    \"\"\"–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ {class_name}\"\"\"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assert hasattr(test_module, '{class_name}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å
        class_obj = getattr(test_module, '{class_name}')
        assert isinstance(class_obj, type)
        
        print(f"‚úÖ –ö–ª–∞—Å—Å {class_name} –Ω–∞–π–¥–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–æ–º")
        
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ {class_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

def test_{class_name}_instantiation():
    \"\"\"–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ {class_name}\"\"\"
    try:
        class_obj = getattr(test_module, '{class_name}')
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if {has_init}:
            # –° –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
            if {init_args}:
                # –° –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                test_args = generate_test_args_for_class('{class_name}', {init_args})
                if test_args:
                    instance = class_obj(*test_args)
                    assert isinstance(instance, class_obj)
                    print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {class_name} —Å–æ–∑–¥–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {{test_args}}")
                else:
                    # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    instance = class_obj()
                    assert isinstance(instance, class_obj)
                    print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {class_name} —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            else:
                # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                instance = class_obj()
                assert isinstance(instance, class_obj)
                print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {class_name} —Å–æ–∑–¥–∞–Ω")
        else:
            # –ë–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            instance = class_obj()
            assert isinstance(instance, class_obj)
            print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {class_name} —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ {class_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        for method_info in methods:
            if method_info['name'] != '__init__':
                test_code += self._generate_method_tests(class_name, method_info)
        
        return test_code
    
    def _generate_method_tests(self, class_name: str, method_info: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞"""
        method_name = method_info['name']
        args = method_info['args'][1:]  # –ò—Å–∫–ª—é—á–∞–µ–º self
        defaults = method_info['defaults']
        has_return = method_info['has_return']
        
        test_code = f"""
def test_{class_name}_{method_name}_method():
    \"\"\"–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ {method_name} –∫–ª–∞—Å—Å–∞ {class_name}\"\"\"
    try:
        class_obj = getattr(test_module, '{class_name}')
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if {len(args)} > 0 and {len(defaults)} == 0:
            # –ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            test_init_args = generate_test_args_for_class('{class_name}', [])
            if test_init_args:
                instance = class_obj(*test_init_args)
            else:
                instance = class_obj()
        else:
            instance = class_obj()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥
        method = getattr(instance, '{method_name}')
        assert callable(method)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–∞
        test_args = generate_test_args_for_method('{class_name}', '{method_name}', {args}, {defaults})
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥
        if test_args:
            result = method(*test_args)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if {has_return}:
                assert result is not None, f"–ú–µ—Ç–æ–¥ {method_name} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –∫–ª–∞—Å—Å–∞ {class_name} –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {{test_args}}")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_name}")
            
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ {method_name} –∫–ª–∞—Å—Å–∞ {class_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

def test_{class_name}_{method_name}_logic():
    \"\"\"–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –º–µ—Ç–æ–¥–∞ {method_name} –∫–ª–∞—Å—Å–∞ {class_name}\"\"\"
    try:
        class_obj = getattr(test_module, '{class_name}')
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
        if '{class_name}' == 'Calculator':
            instance = class_obj(10)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 10
            
            if '{method_name}' == 'add':
                result = instance.add(5)
                assert result == 15, f"Calculator(10).add(5) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 15, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).add(5) = {{result}}")
                
            elif '{method_name}' == 'subtract':
                result = instance.subtract(3)
                assert result == 7, f"Calculator(10).subtract(3) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 7, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).subtract(3) = {{result}}")
                
            elif '{method_name}' == 'multiply':
                result = instance.multiply(2)
                assert result == 20, f"Calculator(10).multiply(2) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 20, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).multiply(2) = {{result}}")
                
            elif '{method_name}' == 'divide':
                result = instance.divide(2)
                assert result == 5, f"Calculator(10).divide(2) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 5, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).divide(2) = {{result}}")
                
            elif '{method_name}' == 'get_value':
                result = instance.get_value()
                assert result == 10, f"Calculator(10).get_value() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 10, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).get_value() = {{result}}")
                
            elif '{method_name}' == 'reset':
                result = instance.reset()
                assert result == 0, f"Calculator(10).reset() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0, –∞ –Ω–µ {{result}}"
                print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: Calculator(10).reset() = {{result}}")
                
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
                test_args = generate_test_args_for_method('{class_name}', '{method_name}', {args}, {defaults})
                if test_args:
                    result = method(*test_args)
                    print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {{result}}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –º–µ—Ç–æ–¥–∞ {method_name}")
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            instance = class_obj()
            test_args = generate_test_args_for_method('{class_name}', '{method_name}', {args}, {defaults})
            if test_args:
                method = getattr(instance, '{method_name}')
                result = method(*test_args)
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –∫–ª–∞—Å—Å–∞ {class_name} –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {{result}}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –º–µ—Ç–æ–¥–∞ {method_name}")
                
    except Exception as e:
        pytest.fail("–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –º–µ—Ç–æ–¥–∞ {method_name} –∫–ª–∞—Å—Å–∞ {class_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

"""
        
        return test_code
    
    def _generate_integration_tests(self, module_functions: list, classes: list) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        test_code = """
def test_integration_basic_flow():
    \"\"\"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã\"\"\"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert test_module is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        expected_functions = """ + str([f['name'] for f in module_functions]) + """
        expected_classes = """ + str([c['name'] for c in classes]) + """
        
        for func_name in expected_functions:
            assert hasattr(test_module, func_name), f"–§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        for class_name in expected_classes:
            assert hasattr(test_module, class_name), f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥—É–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã")
        
    except Exception as e:
        pytest.fail("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " + str(e))

"""
        
        return test_code
    
    def _generate_test_args_for_function(self, func_name: str, args: list, defaults: list) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_args = []
        
        for i, arg in enumerate(args):
            if i < len(defaults):
                # –ï—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                test_args.append(eval(defaults[i]))
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                test_args.append(self._generate_test_value_for_arg(arg))
        
        return test_args
    
    def _generate_test_args_for_class(self, class_name: str, args: list) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        test_args = []
        
        for arg in args:
            test_args.append(self._generate_test_value_for_arg(arg))
        
        return test_args
    
    def _generate_test_args_for_method(self, class_name: str, method_name: str, args: list, defaults: list) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞"""
        test_args = []
        
        for i, arg in enumerate(args):
            if i < len(defaults):
                # –ï—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                test_args.append(eval(defaults[i]))
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                test_args.append(self._generate_test_value_for_arg(arg))
        
        return test_args
    
    def _generate_test_value_for_arg(self, arg_name: str) -> any:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        arg_lower = arg_name.lower()
        
        if 'number' in arg_lower or 'num' in arg_lower or 'value' in arg_lower:
            return 42
        elif 'string' in arg_lower or 'text' in arg_lower or 'name' in arg_lower:
            return "test_string"
        elif 'list' in arg_lower or 'array' in arg_lower:
            return [1, 2, 3]
        elif 'dict' in arg_lower or 'map' in arg_lower:
            return {"key": "value"}
        elif 'bool' in arg_lower or 'flag' in arg_lower:
            return True
        elif 'file' in arg_lower or 'path' in arg_lower:
            return "/tmp/test_file.txt"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ
            return 42
    
    def _run_tests(self, test_file: str, original_file: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {test_file}")
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_file}")
            
            # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    test_content = f.read()
                logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {test_content[:500]}...")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            test_dir = os.path.dirname(test_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
            result = subprocess.run(
                ["python3", "-m", "pytest", test_file, "-v", "--tb=short"],
                capture_output=True,
                text=True,
                timeout=60,  # –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                cwd=test_dir  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if result.returncode == 0:
                # –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
                output = result.stdout.strip()
                logger.info(f"–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {original_file} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚úÖ **–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {original_file} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!**\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n```\n{output}\n```\n\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
                        }
                    ]
                }
            else:
                # –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
                error_output = result.stderr.strip()
                stdout_output = result.stdout.strip()
                
                logger.warning(f"–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {original_file} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                report = f"‚ùå **–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {original_file} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!**\n\n"
                report += f"**–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {result.returncode}\n\n"
                
                if stdout_output:
                    report += f"**–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:**\n```\n{stdout_output}\n```\n\n"
                
                if error_output:
                    report += f"**–û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n```\n{error_output}\n```\n\n"
                
                report += "üîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                report += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ–¥–∞\n"
                report += "- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                report += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
                report += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤\n"
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": report
                        }
                    ]
                }
                
        except subprocess.TimeoutExpired:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ **–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤** –¥–ª—è —Ñ–∞–π–ª–∞ {original_file} (60 —Å–µ–∫—É–Ω–¥)\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∏–ª–∏ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã."
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤** –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ pytest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
                    }
                ]
            }
