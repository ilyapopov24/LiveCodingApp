#!/usr/bin/env python3
"""
HTTP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø—Ä–æ—Å–ª–æ–π–∫–∞ –º–µ–∂–¥—É Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import json
import logging
import os
import subprocess
from datetime import datetime
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class MCPServerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.project_root = "/app"
    
    def execute_python_runner_command(self, command: str, args: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ Python Runner MCP —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            logger.info(f"üöÄ Executing Python Runner command: {command} with args: {args}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨ –î–õ–Ø DOCKER LOGS
            print(f"üîß MCP COMMAND: {command}")
            print(f"üìù ARGUMENTS: {args}")
            print(f"‚è∞ TIMESTAMP: {datetime.now().isoformat()}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Python Runner MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
            try:
                logger.info("üì¶ Importing PythonRunnerMCPServer...")
                print("üì¶ Importing PythonRunnerMCPServer...")
                from src.python_runner_mcp_server import PythonRunnerMCPServer
                logger.info("‚úÖ PythonRunnerMCPServer imported successfully")
                print("‚úÖ PythonRunnerMCPServer imported successfully")
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
                logger.info("üîß Creating server instance...")
                print("üîß Creating server instance...")
                server = PythonRunnerMCPServer()
                logger.info("‚úÖ Server instance created")
                print("‚úÖ Server instance created")
                
                # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                logger.info(f"üéØ Calling tool: {command}")
                print(f"üéØ Calling tool: {command}")
                result = server.call_tool(command, args)
                logger.info(f"‚úÖ Tool executed successfully")
                print(f"‚úÖ Tool executed successfully")
                logger.info(f"üìä Result type: {type(result)}")
                print(f"üìä Result type: {type(result)}")
                logger.info(f"üìÑ Result content: {str(result)[:200]}...")
                print(f"üìÑ Result content: {str(result)[:200]}...")
                
                return {
                    "success": True,
                    "data": result,
                    "stdout": str(result),
                    "stderr": ""
                }
                
            except ImportError as e:
                logger.error(f"‚ùå Failed to import PythonRunnerMCPServer: {e}")
                logger.error(f"üìÅ Current working directory: {os.getcwd()}")
                logger.error(f"üìÇ Directory contents: {os.listdir('.')}")
                return {
                    "success": False,
                    "error": f"Import error: {e}"
                }
            except Exception as e:
                logger.error(f"‚ùå Failed to execute command: {e}")
                logger.error(f"üîç Exception type: {type(e)}")
                import traceback
                logger.error(f"üìö Traceback: {traceback.format_exc()}")
                return {
                    "success": False,
                    "error": f"Execution error: {e}"
                }
                
        except Exception as e:
            logger.error(f"üí• Unexpected error: {e}")
            import traceback
            logger.error(f"üìö Traceback: {traceback.format_exc()}")
            return {
                "success": False,
                "error": f"Unexpected error: {e}"
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
mcp_manager = MCPServerManager()

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "service": "MCP HTTP Bridge",
        "timestamp": "2025-08-26T23:57:00Z"
    })

@app.route('/fix-android-bug', methods=['POST'])
def fix_android_bug():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Android –±–∞–≥–æ–≤"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No JSON data provided"
            }), 400
        
        project_path = data.get('project_path')
        bug_description = data.get('bug_description')
        
        if not project_path or not bug_description:
            return jsonify({
                "success": False,
                "error": "Missing required fields: project_path, bug_description"
            }), 400
        
        logger.info(f"Received fix-android-bug request: project_path={project_path}, bug_description={bug_description}")
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨ –î–õ–Ø DOCKER LOGS
        print(f"üöÄ FIX-ANDROID-BUG: project_path={project_path}")
        print(f"üêõ BUG DESCRIPTION: {bug_description}")
        print(f"‚è∞ TIMESTAMP: {datetime.now().isoformat()}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Python Runner MCP —Å–µ—Ä–≤–µ—Ä–µ
        result = mcp_manager.execute_python_runner_command(
            'fix-android-bug',
            {
                'project_path': project_path,
                'bug_description': bug_description
            }
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ RESULT: success={result.get('success', False)}")
        if 'error' in result:
            print(f"‚ùå ERROR: {result['error']}")
        
        if result['success']:
            return jsonify(result)
        else:
            return jsonify(result), 500
            
    except Exception as e:
        logger.error(f"Error in fix-android-bug endpoint: {e}")
        return jsonify({
            "success": False,
            "error": f"Internal server error: {e}"
        }), 500

@app.route('/build-android-pipeline', methods=['POST'])
def build_android_pipeline():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Android debug build pipeline"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No JSON data provided"
            }), 400
        
        logger.info("Received build-android-pipeline request")
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨ –î–õ–Ø DOCKER LOGS
        print(f"üöÄ BUILD-ANDROID-PIPELINE: Starting pipeline")
        print(f"‚è∞ TIMESTAMP: {datetime.now().isoformat()}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Python Runner MCP —Å–µ—Ä–≤–µ—Ä–µ
        result = mcp_manager.execute_python_runner_command(
            'build-android-pipeline',
            {}
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ RESULT: success={result.get('success', False)}")
        if 'error' in result:
            print(f"‚ùå ERROR: {result['error']}")
        
        if result['success']:
            return jsonify(result)
        else:
            return jsonify(result), 500
            
    except Exception as e:
        logger.error(f"Error in build-android-pipeline endpoint: {e}")
        return jsonify({
            "success": False,
            "error": f"Internal server error: {e}"
        }), 500

@app.route('/mcp/execute', methods=['POST'])
def execute_mcp_command():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No JSON data provided"
            }), 400
        
        tool_name = data.get('tool_name')
        arguments = data.get('arguments', {})
        
        if not tool_name:
            return jsonify({
                "success": False,
                "error": "Missing required field: tool_name"
            }), 400
        
        logger.info(f"Received MCP command: tool_name={tool_name}, arguments={arguments}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Python Runner MCP —Å–µ—Ä–≤–µ—Ä–µ
        result = mcp_manager.execute_python_runner_command(tool_name, arguments)
        
        if result['success']:
            return jsonify(result)
        else:
            return jsonify(result), 500
            
    except Exception as e:
        logger.error(f"Error in execute_mcp_command endpoint: {e}")
        return jsonify({
            "success": False,
            "error": f"Internal server error: {e}"
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    host = os.environ.get('HOST', '0.0.0.0')
    
    logger.info(f"Starting HTTP server on {host}:{port}")
    app.run(host=host, port=port, debug=False)

