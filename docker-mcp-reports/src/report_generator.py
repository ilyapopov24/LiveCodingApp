"""
Report Generator
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö GitHub (–±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞)
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

from github_client import GitHubClient
from gemini_client import GeminiClient

logger = logging.getLogger(__name__)

class ReportGenerator:
    def __init__(self, gemini_client: GeminiClient, github_client: GitHubClient):
        self.gemini_client = gemini_client
        self.github_client = github_client

    def generate_comprehensive_report(self, username: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ GitHub –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            profile = self.github_client.get_user_profile()
            if not profile:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return None

            repositories = self.github_client.get_user_repositories()
            if not repositories:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
                return None

            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            enriched_data = self._enrich_data(profile, repositories)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞
            report = self._create_report_from_data(enriched_data)
            
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return report

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def generate_technology_stack_report(self, username: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Å—Ç–µ–∫—É"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Å—Ç–µ–∫—É...")
            
            profile = self.github_client.get_user_profile()
            repositories = self.github_client.get_user_repositories()
            
            if not profile or not repositories:
                return None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            languages_data = self._analyze_languages(repositories)
            
            report = self._create_tech_stack_report(profile, repositories, languages_data)
            
            logger.info("–û—Ç—á–µ—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Å—Ç–µ–∫—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return report

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Å—Ç–µ–∫—É: {e}")
            return None

    def generate_activity_report(self, username: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            
            profile = self.github_client.get_user_profile()
            repositories = self.github_client.get_user_repositories()
            
            if not profile or not repositories:
                return None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            activity_data = self._analyze_activity(repositories)
            
            report = self._create_activity_report(profile, repositories, activity_data)
            
            logger.info("–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return report

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None

    def _enrich_data(self, profile: Dict[str, Any], repositories: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        logger.info("–û–±–æ–≥–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...")
        
        enriched_profile = profile.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        enriched_profile['total_repos'] = len(repositories)
        enriched_profile['public_repos'] = len([r for r in repositories if r.get('private') == False])
        enriched_profile['private_repos'] = len([r for r in repositories if r.get('private') == True])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        languages_data = self._analyze_languages(repositories)
        enriched_profile['languages'] = languages_data
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_data = self._analyze_activity(repositories)
        enriched_profile['activity'] = activity_data
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        top_repos = self._analyze_top_repositories(repositories)
        enriched_profile['top_repositories'] = top_repos
        
        logger.info("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–æ–≥–∞—â–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
        return enriched_profile

    def _analyze_languages(self, repositories: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        languages_count = {}
        total_size = 0
        
        for repo in repositories:
            repo_name = repo.get('name', '')
            languages = self.github_client.get_repository_languages(repo_name)
            
            if languages:
                for lang, size in languages.items():
                    if lang in languages_count:
                        languages_count[lang] += size
                    else:
                        languages_count[lang] = size
                    total_size += size
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        sorted_languages = sorted(languages_count.items(), key=lambda x: x[1], reverse=True)
        
        return {
            'total_size': total_size,
            'languages': sorted_languages,
            'top_languages': sorted_languages[:5]
        }

    def _analyze_activity(self, repositories: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now()
        month_ago = now - timedelta(days=30)
        
        recent_activity = 0
        total_stars = 0
        total_forks = 0
        total_watchers = 0
        
        for repo in repositories:
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_stars += repo.get('stargazers_count', 0)
            total_forks += repo.get('forks_count', 0)
            total_watchers += repo.get('watchers_count', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            updated_at = repo.get('updated_at')
            if updated_at:
                try:
                    updated_date = datetime.fromisoformat(updated_at.replace('Z', '+00:00'))
                    if updated_date > month_ago:
                        recent_activity += 1
                except:
                    pass
        
        return {
            'recent_activity': recent_activity,
            'total_stars': total_stars,
            'total_forks': total_forks,
            'total_watchers': total_watchers,
            'activity_percentage': (recent_activity / len(repositories)) * 100 if repositories else 0
        }

    def _analyze_top_repositories(self, repositories: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–≤–µ–∑–¥–∞–º
        sorted_by_stars = sorted(repositories, key=lambda x: x.get('stargazers_count', 0), reverse=True)
        
        top_repos = []
        for repo in sorted_by_stars[:5]:
            top_repos.append({
                'name': repo.get('name', ''),
                'description': repo.get('description', ''),
                'stars': repo.get('stargazers_count', 0),
                'forks': repo.get('forks_count', 0),
                'language': repo.get('language', 'Unknown'),
                'updated_at': repo.get('updated_at', ''),
                'url': repo.get('html_url', '')
            })
        
        return top_repos

    def _create_report_from_data(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞"""
        profile = data
        
        report = f"""
# üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ GITHUB –ü–†–û–§–ò–õ–Ø
## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile.get('login', 'Unknown')}
## –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---

## üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

**–ò–º—è:** {profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–õ–æ–≥–∏–Ω:** @{profile.get('login', 'Unknown')}
**Email:** {profile.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–ö–æ–º–ø–∞–Ω–∏—è:** {profile.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–õ–æ–∫–∞—Ü–∏—è:** {profile.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:** {profile.get('bio', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {profile.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {profile.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

---

## üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í

**–í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:** {profile.get('total_repos', 0)}
**–ü—É–±–ª–∏—á–Ω—ã—Ö:** {profile.get('public_repos', 0)}
**–ü—Ä–∏–≤–∞—Ç–Ω—ã—Ö:** {profile.get('private_repos', 0)}
**–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {profile.get('followers', 0)}
**–ü–æ–¥–ø–∏—Å–æ–∫:** {profile.get('following', 0)}

---

## üöÄ –¢–û–ü –†–ï–ü–û–ó–ò–¢–û–†–ò–ò

"""
        
        top_repos = profile.get('top_repositories', [])
        for i, repo in enumerate(top_repos, 1):
            report += f"""
**{i}. {repo.get('name', 'Unknown')}**
- –û–ø–∏—Å–∞–Ω–∏–µ: {repo.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
- –Ø–∑—ã–∫: {repo.get('language', 'Unknown')}
- ‚≠ê –ó–≤–µ–∑–¥—ã: {repo.get('stars', 0)}
- üç¥ –§–æ—Ä–∫–∏: {repo.get('forks', 0)}
- üîó URL: {repo.get('url', 'N/A')}

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤
        languages_data = profile.get('languages', {})
        if languages_data and 'top_languages' in languages_data:
            report += """
---

## üíª –Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø

**–¢–æ–ø —è–∑—ã–∫–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–¥–∞:**
"""
            for lang, size in languages_data.get('top_languages', []):
                percentage = (size / languages_data.get('total_size', 1)) * 100
                report += f"- **{lang}**: {size:,} –±–∞–π—Ç ({percentage:.1f}%)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_data = profile.get('activity', {})
        if activity_data:
            report += f"""
---

## üìä –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò

**–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–∞ –º–µ—Å—è—Ü:** {activity_data.get('recent_activity', 0)}
**–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {activity_data.get('activity_percentage', 0):.1f}%
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:** {activity_data.get('total_stars', 0):,}
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤:** {activity_data.get('total_forks', 0):,}
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π:** {activity_data.get('total_watchers', 0):,}

---

## üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö GitHub API.
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.

**–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%H:%M:%S')}
**–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** GitHub REST API v3
"""
        
        return report

    def _create_tech_stack_report(self, profile: Dict[str, Any], repositories: List[Dict[str, Any]], languages_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Å—Ç–µ–∫—É"""
        report = f"""
# üõ†Ô∏è –û–¢–ß–ï–¢ –ü–û –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–û–ú–£ –°–¢–ï–ö–£
## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile.get('login', 'Unknown')}
## –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---

## üíª –Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø

**–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–¥–∞:** {languages_data.get('total_size', 0):,} –±–∞–π—Ç

**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:**
"""
        
        for lang, size in languages_data.get('languages', []):
            percentage = (size / languages_data.get('total_size', 1)) * 100
            report += f"- **{lang}**: {size:,} –±–∞–π—Ç ({percentage:.1f}%)\n"
        
        report += f"""
---

## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–û–í

**–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:** {len(repositories)}
**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** {', '.join([lang for lang, _ in languages_data.get('top_languages', [])[:3]])}

---

## üîç –ê–ù–ê–õ–ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í

"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ —è–∑—ã–∫–∞–º
        repos_by_lang = {}
        for repo in repositories:
            lang = repo.get('language', 'Unknown')
            if lang not in repos_by_lang:
                repos_by_lang[lang] = []
            repos_by_lang[lang].append(repo)
        
        for lang, repos in sorted(repos_by_lang.items(), key=lambda x: len(x[1]), reverse=True):
            report += f"""
**{lang}** ({len(repos)} –ø—Ä–æ–µ–∫—Ç–æ–≤):
"""
            for repo in repos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                report += f"- {repo.get('name', 'Unknown')} - ‚≠ê{repo.get('stargazers_count', 0)}\n"
        
        return report

    def _create_activity_report(self, profile: Dict[str, Any], repositories: List[Dict[str, Any]], activity_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        report = f"""
# üìà –û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò
## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile.get('login', 'Unknown')}
## –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

**–í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:** {len(repositories)}
**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü:** {activity_data.get('recent_activity', 0)}
**–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {activity_data.get('activity_percentage', 0):.1f}%

---

## ‚≠ê –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–¨

**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:** {activity_data.get('total_stars', 0):,}
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤:** {activity_data.get('total_forks', 0):,}
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π:** {activity_data.get('total_watchers', 0):,}

---

## üèÜ –¢–û–ü –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò

"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        recent_repos = sorted(repositories, key=lambda x: x.get('updated_at', ''), reverse=True)
        
        for i, repo in enumerate(recent_repos[:5], 1):
            updated_at = repo.get('updated_at', '')
            if updated_at:
                try:
                    updated_date = datetime.fromisoformat(updated_at.replace('Z', '+00:00'))
                    days_ago = (datetime.now() - updated_date).days
                    time_str = f"{days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥" if days_ago > 0 else "–°–µ–≥–æ–¥–Ω—è"
                except:
                    time_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                time_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            report += f"""
**{i}. {repo.get('name', 'Unknown')}**
- –û–±–Ω–æ–≤–ª–µ–Ω: {time_str}
- ‚≠ê –ó–≤–µ–∑–¥—ã: {repo.get('stargazers_count', 0)}
- üç¥ –§–æ—Ä–∫–∏: {repo.get('forks_count', 0)}
- –Ø–∑—ã–∫: {repo.get('language', 'Unknown')}

"""
        
        return report
