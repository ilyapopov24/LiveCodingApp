#!/usr/bin/env python3
"""
Spaceweb VPS MCP Server
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPS –Ω–∞ Spaceweb —á–µ—Ä–µ–∑ API
"""

import json
import logging
import os
import requests
from typing import Dict, Any, List
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SpacewebMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPS –Ω–∞ Spaceweb"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv('docker.env')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ç–æ–∫–µ–Ω
        self.api_token = os.getenv('SPACEWEB_TOKEN')
        if not self.api_token:
            raise ValueError("SPACEWEB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ docker.env —Ñ–∞–π–ª–µ!")
        
        self.api_base_url = "https://api.sweb.ru"
        logger.info("Spaceweb API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        self.tools = [
            {
                "name": "get-available-config",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã VPS, –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã –û–° –∏ –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ã",
                "inputSchema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            },
            {
                "name": "list-vps",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö VPS",
                "inputSchema": {
                    "type": "object", 
                    "properties": {},
                    "required": []
                }
            },
            {
                "name": "create-vps",
                "description": "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VPS –Ω–∞ Spaceweb",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "vpsPlanId": {
                            "type": "integer",
                            "description": "ID —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ VPS"
                        },
                        "distributiveId": {
                            "type": "integer", 
                            "description": "ID –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
                        },
                        "datacenter": {
                            "type": "integer",
                            "description": "ID –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä–∞"
                        },
                        "alias": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ VPS"
                        },
                        "sshKey": {
                            "type": "string",
                            "description": "–ü—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "sshKeyName": {
                            "type": "string",
                            "description": "–ò–º—è SSH-–∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "privateIp": {
                            "type": "boolean",
                            "description": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "monitoringPlanId": {
                            "type": "integer",
                            "description": "ID –ø–ª–∞–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "monitoringContactId": {
                            "type": "integer",
                            "description": "ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "remoteBackupId": {
                            "type": "integer",
                            "description": "ID –±—ç–∫–∞–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "ipCount": {
                            "type": "integer",
                            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ IP-–∞–¥—Ä–µ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "protectedIps": {
                            "type": "array",
                            "items": {"type": "integer"},
                            "description": "–ú–∞—Å—Å–∏–≤ ID —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö IP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        }
                    },
                    "required": ["vpsPlanId", "distributiveId"]
                }
            }
        ]

    def list_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(self.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return self.tools

    def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        logger.info(f"–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")
        
        try:
            if tool_name == "get-available-config":
                return self.get_available_config()
            elif tool_name == "list-vps":
                return self.list_vps()
            elif tool_name == "create-vps":
                return self.create_vps(arguments)
            else:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
                        }
                    ]
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {str(e)}"
                    }
                ]
            }

    def get_available_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPS"""
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π VPS")
            
            # JSON-RPC 2.0 payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            payload = {
                "jsonrpc": "2.0",
                "method": "getAvailableConfig",
                "params": {},
                "id": "get_config"
            }
            
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            response = requests.post(
                f"{self.api_base_url}/vps",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                response_data = response.json()
                
                if "error" in response_data:
                    error_info = response_data["error"]
                    return {
                        "content": [
                            {
                                "type": "text",
                                "text": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error_info.get('message', 'N/A')}"
                            }
                        ]
                    }
                
                result = response_data.get("result", {})
                result_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPS:\n\n"
                
                # –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
                if "vpsPlans" in result:
                    result_text += "üí∞ **–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n"
                    for plan in result["vpsPlans"]:
                        result_text += f"  ‚Ä¢ ID: {plan.get('id')} - {plan.get('name')} "
                        result_text += f"({plan.get('cpu_cores')} CPU, {plan.get('ram')} RAM, "
                        result_text += f"{plan.get('volume_disk')} GB) - {plan.get('price_per_month', 0)} —Ä—É–±/–º–µ—Å\n"
                    result_text += "\n"
                
                # –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –∏–∑ osPanel)
                if "osPanel" in result:
                    result_text += "üíø **–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã –û–°:**\n"
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ OS –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    os_groups = {}
                    for dist in result["osPanel"]:
                        os_id = dist.get('os')
                        if os_id not in os_groups:
                            os_groups[os_id] = []
                        os_groups[os_id].append(dist)
                    
                    for os_id, distributions in os_groups.items():
                        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –û–° –∏–∑ selectOs
                        os_name = "Unknown OS"
                        if "selectOs" in result:
                            for os_info in result["selectOs"]:
                                if str(os_info.get('id')) == str(os_id):
                                    os_name = os_info.get('name', 'Unknown OS')
                                    break
                        
                        result_text += f"  **{os_name} (os_id: {os_id}):**\n"
                        for dist in distributions:
                            panel_name = "No Panel"
                            if "selectPanel" in result:
                                for panel in result["selectPanel"]:
                                    if str(panel.get('id')) == str(dist.get('panel')):
                                        panel_name = panel.get('name', 'Unknown Panel')
                                        break
                            result_text += f"    ‚Ä¢ ID: {dist.get('distributive')} - {panel_name}\n"
                    result_text += "\n"
                
                # –î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ã
                if "datacenters" in result:
                    result_text += "üè¢ **–î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ã:**\n"
                    for dc in result["datacenters"]:
                        result_text += f"  ‚Ä¢ ID: {dc.get('id')} - {dc.get('location')} ({dc.get('site_name')})\n"
                    result_text += "\n"
                
                result_text += "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ **distributive ID** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPS —Å –ø–æ–º–æ—â—å—é create-vps"
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": result_text
                        }
                    ]
                }
            else:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}\n{response.text}"
                        }
                    ]
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
                    }
                ]
            }

    def list_vps(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö VPS"""
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VPS")
            
            # JSON-RPC 2.0 payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPS
            payload = {
                "jsonrpc": "2.0", 
                "method": "index",
                "params": {},
                "id": "list_vps"
            }
            
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            response = requests.post(
                f"{self.api_base_url}/vps",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                response_data = response.json()
                
                if "error" in response_data:
                    error_info = response_data["error"]
                    return {
                        "content": [
                            {
                                "type": "text", 
                                "text": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPS: {error_info.get('message', 'N/A')}"
                            }
                        ]
                    }
                
                vps_list = response_data.get("result", [])
                
                if not vps_list:
                    result_text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPS —Å–µ—Ä–≤–µ—Ä–æ–≤"
                else:
                    result_text = f"üñ•Ô∏è –í–∞—à–∏ VPS —Å–µ—Ä–≤–µ—Ä—ã ({len(vps_list)} —à—Ç.):\n\n"
                    
                    for vps in vps_list:
                        result_text += f"**{vps.get('name', 'N/A')}**\n"
                        result_text += f"  ‚Ä¢ ID: {vps.get('billingId', 'N/A')}\n"
                        result_text += f"  ‚Ä¢ –ü–ª–∞–Ω: {vps.get('plan_name', 'N/A')}\n"
                        result_text += f"  ‚Ä¢ –û–°: {vps.get('os_distribution', 'N/A')}\n"
                        result_text += f"  ‚Ä¢ IP: {vps.get('ip', 'N/A')}\n"
                        result_text += f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if vps.get('active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                        result_text += f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω: {vps.get('ts_create', 'N/A')}\n\n"
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": result_text
                        }
                    ]
                }
            else:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}\n{response.text}"
                        }
                    ]
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPS: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPS: {str(e)}"
                    }
                ]
            }

    def create_vps(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VPS –Ω–∞ Spaceweb"""
        try:
            vps_plan_id = arguments.get("vpsPlanId")
            distributive_id = arguments.get("distributiveId")
            datacenter = arguments.get("datacenter")
            alias = arguments.get("alias")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not all([vps_plan_id, distributive_id]):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: vpsPlanId, distributiveId"
                        }
                    ]
                }
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ VPS: {alias} —Å –ø–ª–∞–Ω–æ–º {vps_plan_id} –∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–º {distributive_id}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON-RPC API
            params = {
                "vpsPlanId": int(vps_plan_id),
                "distributiveId": int(distributive_id)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if datacenter is not None:
                params["datacenter"] = int(datacenter)
            if alias is not None:
                params["alias"] = str(alias)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            optional_params = [
                "sshKey", "sshKeyName", "privateIp", "monitoringPlanId", 
                "monitoringContactId", "remoteBackupId", "ipCount", "protectedIps"
            ]
            
            for param in optional_params:
                if param in arguments and arguments[param] is not None:
                    if param in ["monitoringPlanId", "monitoringContactId", "remoteBackupId", "ipCount"]:
                        params[param] = int(arguments[param])
                    elif param == "protectedIps":
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ ID —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö IP
                        if isinstance(arguments[param], list):
                            params[param] = [int(ip) for ip in arguments[param]]
                        else:
                            params[param] = [int(arguments[param])]
                    else:
                        params[param] = arguments[param]
            
            # JSON-RPC 2.0 payload
            payload = {
                "jsonrpc": "2.0",
                "method": "create",
                "params": params
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Spaceweb
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            response = requests.post(
                f"{self.api_base_url}/vps",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                response_data = response.json()
                import json
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ JSON-RPC –æ—Ç–≤–µ—Ç–µ
                if "error" in response_data:
                    error_info = response_data["error"]
                    error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPS\n\n"
                    error_text += f"üî¢ –ö–æ–¥: {error_info.get('code', 'N/A')}\n"
                    error_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_info.get('message', 'N/A')}\n"
                    
                    return {
                        "content": [
                            {
                                "type": "text",
                                "text": error_text
                            }
                        ]
                    }
                
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                vps_name = response_data.get("result", "N/A")
                result_text = f"‚úÖ VPS —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                result_text += f"üñ•Ô∏è –ò–º—è VPS: {vps_name}\n"
                result_text += f"üìõ –ê–ª–∏–∞—Å: {alias}\n"
                result_text += f"üí∞ –ü–ª–∞–Ω: {vps_plan_id}\n"
                result_text += f"üíø –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: {distributive_id}\n"
                result_text += f"üè¢ –î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä: {datacenter}\n"
                
                if "sshKey" in params:
                    result_text += f"üîë SSH-–∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω\n"
                if "monitoringPlanId" in params:
                    result_text += f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ø–ª–∞–Ω {params['monitoringPlanId']}\n"
                if "ipCount" in params:
                    result_text += f"üåê IP –∞–¥—Ä–µ—Å–æ–≤: {params['ipCount']}\n"
                    
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": result_text
                        }
                    ]
                }
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞\n\n"
                error_text += f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}\n"
                
                try:
                    error_data = response.json()
                    if 'error' in error_data:
                        error_info = error_data['error']
                        error_text += f"üî¢ –ö–æ–¥: {error_info.get('code', 'N/A')}\n"
                        error_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_info.get('message', 'N/A')}\n"
                    else:
                        error_text += f"üí¨ –û—Ç–≤–µ—Ç: {error_data}\n"
                except:
                    error_text += f"üí¨ –û—Ç–≤–µ—Ç: {response.text}\n"
                
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": error_text
                        }
                    ]
                }
                
        except requests.exceptions.Timeout:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Spaceweb API"
                    }
                ]
            }
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Spaceweb API: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Spaceweb API: {str(e)}"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPS: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                    }
                ]
            }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = SpacewebMCPServer()
    logger.info("Spaceweb MCP Server –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main()

