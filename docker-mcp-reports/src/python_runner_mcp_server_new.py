#!/usr/bin/env python3
"""
Python Runner MCP Server
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ Python —Ñ–∞–π–ª—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑—É—è OpenAI
"""

import json
import subprocess
import logging
import tempfile
import os
import openai
from typing import Dict, Any, List
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PythonRunnerMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv('docker.env')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key or api_key == 'your_openai_api_key_here':
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ docker.env —Ñ–∞–π–ª–µ!")
        
        openai.api_key = api_key
        logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        self.tools = [
            {
                "name": "run-python-file",
                "description": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Python —Ñ–∞–π–ª",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /host –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
                        }
                    },
                    "required": ["file_path"]
                }
            },
            {
                "name": "test-python-code",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /host –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
                        }
                    },
                    "required": ["file_path"]
                }
            }
        ]

    def handle_request(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            method = request.get("method")
            params = request.get("params", {})
            
            if method == "tools/list":
                return {
                    "tools": self.tools
                }
            elif method == "tools/call":
                tool_name = params.get("name")
                arguments = params.get("arguments", {})
                
                if tool_name == "run-python-file":
                    return self.run_python_file(arguments.get("file_path"))
                elif tool_name == "test-python-code":
                    return self.test_python_code(arguments.get("file_path"))
                else:
                    return {
                        "content": [
                            {
                                "type": "text",
                                "text": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
                            }
                        ]
                    }
            else:
                return {
                    "error": {
                        "code": -32601,
                        "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}"
                    }
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return {
                "error": {
                    "code": -32603,
                    "message": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
                }
            }

    def run_python_file(self, file_path: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            if not file_path:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                        }
                    ]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                        }
                    ]
                }
            
            logger.info(f"–ó–∞–ø—É—Å–∫ Python —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
            result = subprocess.run(
                ["python3", file_path],
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            output_text = f"üêç –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: {file_path}\n\n"
            
            if result.stdout:
                output_text += f"üì§ –í—ã–≤–æ–¥:\n{result.stdout}\n"
            
            if result.stderr:
                output_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∏:\n{result.stderr}\n"
            
            output_text += f"üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.returncode}"
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": output_text
                    }
                ]
            }
            
        except subprocess.TimeoutExpired:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }

    def test_python_code(self, file_path: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Python —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI"""
        try:
            if not file_path:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                        }
                    ]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                        }
                    ]
                }
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                source_code = f.read()
            
            logger.info(f"–§–∞–π–ª {file_path} –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(source_code)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è OpenAI
            test_code = self._generate_tests_with_openai(source_code, file_path)
            
            if not test_code:
                return {
                    "content": [
                        {
                            "type": "text",
                            "text": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}"
                        }
                    ]
                }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                original_filename = os.path.basename(file_path)
                temp_original_file = os.path.join(temp_dir, original_filename)
                
                with open(file_path, 'r', encoding='utf-8') as src, open(temp_original_file, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                test_filename = f"test_{original_filename}"
                temp_test_file = os.path.join(temp_dir, test_filename)
                
                with open(temp_test_file, 'w', encoding='utf-8') as test_file:
                    test_file.write(test_code)
                
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {temp_dir}")
                logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {temp_original_file}")
                logger.info(f"–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {temp_test_file}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
                test_result = self._run_tests(temp_test_file, temp_original_file)
            
            return test_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                    }
                ]
            }

    def _generate_tests_with_openai(self, source_code: str, file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã –¥–ª—è {file_path} –∏—Å–ø–æ–ª—å–∑—É—è OpenAI API")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            module_name = os.path.splitext(os.path.basename(file_path))[0]
            
            prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è pytest.

–í–ê–ñ–ù–û: 
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `test_module.`
- –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å –∫–∞–∫ `test_module = __import__('{module_name}')`

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```python
{source_code}
```

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –º–æ–¥—É–ª—å –∫–∞–∫ `test_module`
2. –¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
3. –í–∫–ª—é—á–∞—é—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
4. –ò—Å–ø–æ–ª—å–∑—É—é—Ç pytest
5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç `test_module.` –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è pytest."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.3
            )
            
            test_code = response.choices[0].message.content.strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if test_code.startswith("```python"):
                test_code = test_code[9:]
            if test_code.startswith("```"):
                test_code = test_code[3:]
            if test_code.endswith("```"):
                test_code = test_code[:-3]
            
            test_code = test_code.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if f"test_module = __import__('{module_name}')" not in test_code:
                test_code = f"""import pytest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_module = __import__('{module_name}')

{test_code}
"""
            
            logger.info(f"OpenAI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã: {test_code[:200]}...")
            logger.info(f"OpenAI API —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è {file_path}")
            return test_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise e

    def _run_tests(self, test_file: str, original_file: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {test_file}")
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_file}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            with open(test_file, 'r', encoding='utf-8') as f:
                test_content = f.read()
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {test_content[:500]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            test_dir = os.path.dirname(test_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
            result = subprocess.run(
                ["python3", "-m", "pytest", test_file, "-v", "--tb=short"],
                capture_output=True,
                text=True,
                timeout=60,  # –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                cwd=test_dir  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
            )
            
            output_text = f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {os.path.basename(original_file)}\n\n"
            
            if result.stdout:
                output_text += f"üì§ –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:\n{result.stdout}\n"
            
            if result.stderr:
                output_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤:\n{result.stderr}\n"
            
            output_text += f"üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.returncode}\n"
            
            if result.returncode == 0:
                output_text += "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
            else:
                output_text += "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            
            return {
                "content": [
                    {
                        "type": "text",
                        "text": output_text
                    }
                ]
            }
            
        except subprocess.TimeoutExpired:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}"
                    }
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}")
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {original_file}: {str(e)}"
                    }
                ]
            }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = PythonRunnerMCPServer()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    logger.info("Python Runner MCP Server –∑–∞–ø—É—â–µ–Ω")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º MCP —Å–µ—Ä–≤–µ—Ä–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –∏–∑ stdin
    # –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ stdout
    
if __name__ == "__main__":
    main()









