"""
Gemini API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Generative AI (Gemini)
"""

import logging
import google.generativeai as genai
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

class GeminiClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API"""
    
    def __init__(self, api_key: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.api_key = api_key
        self.model = None
        self._initialize()
    
    def _initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –º–æ–¥–µ–ª–∏"""
        try:
            if not self.api_key or self.api_key == "YOUR_GEMINI_API_KEY_HERE":
                logger.error("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
            genai.configure(api_key=self.api_key)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
            try:
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                logger.info("Gemini –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: gemini-1.5-flash")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å gemini-1.5-flash: {e}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ fallback –º–æ–¥–µ–ª–µ–π
                fallback_models = ['gemini-1.5-pro', 'gemini-1.0-pro', 'gemini-pro']
                
                for model_name in fallback_models:
                    try:
                        self.model = genai.GenerativeModel(model_name)
                        logger.info(f"Gemini –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {model_name}")
                        break
                    except Exception as fallback_e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {model_name}: {fallback_e}")
                        continue
                
                if not self.model:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É Gemini –º–æ–¥–µ–ª—å")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}")
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return self.model is not None
    
    def generate_github_analysis(self, profile_data: Dict[str, Any], repositories: list) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ GitHub –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if not self.is_initialized():
                logger.error("Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._create_analysis_prompt(profile_data, repositories)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                logger.info("–ê–Ω–∞–ª–∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return response.text
            else:
                logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def generate_technology_stack_analysis(self, repositories: list) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞"""
        try:
            if not self.is_initialized():
                logger.error("Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            prompt = self._create_tech_stack_prompt(repositories)
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                logger.info("–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return response.text
            else:
                logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞: {e}")
            return None
    
    def generate_activity_analysis(self, profile_data: Dict[str, Any], repositories: list) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            if not self.is_initialized():
                logger.error("Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            prompt = self._create_activity_prompt(profile_data, repositories)
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                logger.info("–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return response.text
            else:
                logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def _create_analysis_prompt(self, profile_data: Dict[str, Any], repositories: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        return f"""
–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ GitHub –ø—Ä–æ—Ñ–∏–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

–î–ê–ù–ù–´–ï –ü–†–û–§–ò–õ–Ø:
{self._format_profile_data(profile_data)}

–†–ï–ü–û–ó–ò–¢–û–†–ò–ò ({len(repositories)}):
{self._format_repositories_data(repositories)}

–°–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# üìä –ê–ù–ê–õ–ò–ó GITHUB –ü–†–û–§–ò–õ–Ø

## üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ò–º—è: [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
- –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: [–¥–∞—Ç–∞]
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: [–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ]
- –ö–æ–º–ø–∞–Ω–∏—è: [–∫–æ–º–ø–∞–Ω–∏—è]
- –ë–∏–æ: [–±–∏–æ–≥—Ä–∞—Ñ–∏—è]

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- –ü–æ–¥–ø–∏—Å–∫–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- Gists: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]

## ‚≠ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- –í—Å–µ–≥–æ —Ñ–æ—Ä–∫–æ–≤: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: [–¥–∞—Ç–∞]

## üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
- –û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏: [—è–∑—ã–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏]
- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: [—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏]
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: [–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã]

## üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
1. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1]
2. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2]
3. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3]

## üéØ –ò–Ω—Å–∞–π—Ç—ã
- [–∏–Ω—Å–∞–π—Ç 1]
- [–∏–Ω—Å–∞–π—Ç 2]
- [–∏–Ω—Å–∞–π—Ç 3]

–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""
    
    def _create_tech_stack_prompt(self, repositories: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞"""
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:

{self._format_repositories_data(repositories)}

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞:

# üîß –ê–ù–ê–õ–ò–ó –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –°–¢–ï–ö–ê

## üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
[–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º]

## ‚ö° –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
[–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤]

## üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
[–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö]

## üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
[–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, CI/CD, –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã]

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
[–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º]

## üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
[–°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞]
"""
    
    def _create_activity_prompt(self, profile_data: Dict[str, Any], repositories: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å GitHub –ø—Ä–æ—Ñ–∏–ª—è:

–ü–†–û–§–ò–õ–¨: {self._format_profile_data(profile_data)}
–†–ï–ü–û–ó–ò–¢–û–†–ò–ò: {len(repositories)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤

–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

# üìà –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò

## üìÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
[–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏]

## üèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
[–¢–æ–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤
[–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
[–°–æ–≤–µ—Ç—ã –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]

## üìà –¢—Ä–µ–Ω–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è
[–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è]
"""
    
    def _format_profile_data(self, profile_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        return f"""
- –õ–æ–≥–∏–Ω: {profile_data.get('login', 'N/A')}
- –ò–º—è: {profile_data.get('name', 'N/A')}
- Email: {profile_data.get('email', 'N/A')}
- –ë–∏–æ: {profile_data.get('bio', 'N/A')}
- –ö–æ–º–ø–∞–Ω–∏—è: {profile_data.get('company', 'N/A')}
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {profile_data.get('location', 'N/A')}
- –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile_data.get('created_at', 'N/A')}
- –û–±–Ω–æ–≤–ª–µ–Ω: {profile_data.get('updated_at', 'N/A')}
- –ü—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {profile_data.get('public_repos', 0)}
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {profile_data.get('followers', 0)}
- –ü–æ–¥–ø–∏—Å–æ–∫: {profile_data.get('following', 0)}
"""
    
    def _format_repositories_data(self, repositories: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        if not repositories:
            return "–ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
        
        formatted = []
        for i, repo in enumerate(repositories[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            formatted.append(f"""
{i+1}. {repo.get('name', 'N/A')}
   - –û–ø–∏—Å–∞–Ω–∏–µ: {repo.get('description', 'N/A')}
   - –Ø–∑—ã–∫: {repo.get('language', 'N/A')}
   - –ó–≤–µ–∑–¥—ã: {repo.get('stargazers_count', 0)}
   - –§–æ—Ä–∫–∏: {repo.get('forks_count', 0)}
   - –û–±–Ω–æ–≤–ª–µ–Ω: {repo.get('updated_at', 'N/A')}
""")
        
        if len(repositories) > 10:
            formatted.append(f"\n... –∏ –µ—â–µ {len(repositories) - 10} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        
        return "".join(formatted)
