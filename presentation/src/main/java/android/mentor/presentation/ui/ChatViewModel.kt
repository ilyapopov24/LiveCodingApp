package android.mentor.presentation.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import android.mentor.domain.entities.ChatMessage
import android.mentor.domain.entities.StartupDialogState
import android.mentor.domain.usecases.SendChatMessageUseCase
import android.mentor.domain.repository.GitHubActionsRepository
import android.mentor.domain.usecases.TriggerAndroidDebugBuildUseCase
import android.mentor.domain.repository.ChatRepository
import android.mentor.domain.repository.VoiceRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

import javax.inject.Inject

@HiltViewModel
class ChatViewModel @Inject constructor(
    private val sendChatMessageUseCase: SendChatMessageUseCase,
    private val triggerAndroidDebugBuildUseCase: TriggerAndroidDebugBuildUseCase,
    private val chatRepository: ChatRepository,
    private val voiceRepository: VoiceRepository
) : ViewModel() {

    private val _chatMessages = MutableStateFlow<List<ChatMessage>>(emptyList())
    val chatMessages: StateFlow<List<ChatMessage>> = _chatMessages.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _isGeneratingRecommendations = MutableStateFlow(false)
    val isGeneratingRecommendations: StateFlow<Boolean> = _isGeneratingRecommendations.asStateFlow()

    private val _startupDialogState = MutableStateFlow(StartupDialogState())
    val startupDialogState: StateFlow<StartupDialogState> = _startupDialogState.asStateFlow()

    private val _hasRecommendations = MutableStateFlow(false)
    val hasRecommendations: StateFlow<Boolean> = _hasRecommendations.asStateFlow()

    init {
        loadChatHistory()
    }

    private fun loadChatHistory() {
        viewModelScope.launch {
            chatRepository.getAllMessages().collect { messages ->
                _chatMessages.value = messages
            }
        }
    }

    fun sendMessage(message: String) {
        if (message.isBlank()) return
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        when {
            message.lowercase().contains("—Å–æ–±–µ—Ä–∏ –ø–∞–π–ø–ª–∞–π–Ω") -> {
                handleBuildPipelineCommand()
                return
            }
            message.lowercase().contains("–æ—á–∏—Å—Ç–∏ —á–∞—Ç") || 
            message.lowercase().contains("–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç") ||
            message.lowercase().contains("clear chat") ||
            message.lowercase().contains("–æ—á–∏—Å—Ç–∏") -> {
                clearChat()
                return
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        viewModelScope.launch {
            _isLoading.value = true
            try {
                sendChatMessageUseCase(message)
                // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            } catch (e: Exception) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    private fun handleBuildPipelineCommand() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∫–∏
        val buildMessage = ChatMessage(
            id = System.currentTimeMillis().toString(),
            content = "üöÄ –ó–∞–ø—É—Å–∫–∞—é Android debug build pipeline...",
            isUser = false,
            timestamp = System.currentTimeMillis(),
            model = "build-system"
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        viewModelScope.launch {
            chatRepository.saveMessage(buildMessage)
            
            try {
                val result = triggerAndroidDebugBuildUseCase()
                
                val resultMessage = ChatMessage(
                    id = System.currentTimeMillis().toString(),
                    content = result.message,
                    isUser = false,
                    timestamp = System.currentTimeMillis(),
                    model = "build-system"
                )
                chatRepository.saveMessage(resultMessage)
            } catch (e: Exception) {
                val errorMessage = ChatMessage(
                    id = System.currentTimeMillis().toString(),
                    content = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pipeline: ${e.message}",
                    isUser = false,
                    timestamp = System.currentTimeMillis(),
                    model = "build-system"
                )
                chatRepository.saveMessage(errorMessage)
            }
        }
    }

    private fun clearChat() {
        viewModelScope.launch {
            chatRepository.clearAllMessages()
        }
    }

    fun clearChatHistory() {
        viewModelScope.launch {
            chatRepository.clearAllMessages()
        }
    }

    fun cancelStartupDialog() {
        _startupDialogState.value = StartupDialogState()
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        val cancelMessage = ChatMessage(
            id = System.currentTimeMillis().toString(),
            content = "‚ùå Startup dialog cancelled. You can ask any other question.",
            isUser = false,
            timestamp = System.currentTimeMillis(),
            model = "system"
        )
        viewModelScope.launch {
            chatRepository.saveMessage(cancelMessage)
        }
    }

    fun startVoiceInput() {
        viewModelScope.launch {
            val voiceText = voiceRepository.startVoiceInput()
            if (!voiceText.isNullOrBlank()) {
                sendMessage(voiceText)
            }
        }
    }

    fun speakMessage(message: ChatMessage) {
        if (!message.isUser) {
            voiceRepository.speakText(message.content)
        }
    }

    fun stopSpeaking() {
        voiceRepository.stopSpeaking()
    }
}
