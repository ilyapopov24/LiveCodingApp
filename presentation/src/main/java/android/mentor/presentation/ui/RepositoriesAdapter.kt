package android.mentor.presentation.ui

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import android.mentor.presentation.databinding.ItemRepositoryBinding
import android.mentor.domain.entities.RepositoryAnalysis

class RepositoriesAdapter(
    private var repositories: List<RepositoryAnalysis> = emptyList(),
    private val onRepositoryClick: (RepositoryAnalysis) -> Unit
) : RecyclerView.Adapter<RepositoriesAdapter.RepositoryViewHolder>() {

    fun updateRepositories(newRepositories: List<RepositoryAnalysis>) {
        repositories = newRepositories
        notifyDataSetChanged()
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RepositoryViewHolder {
        val binding = ItemRepositoryBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return RepositoryViewHolder(binding)
    }

    override fun onBindViewHolder(holder: RepositoryViewHolder, position: Int) {
        holder.bind(repositories[position])
    }

    override fun getItemCount(): Int = repositories.size

    inner class RepositoryViewHolder(
        private val binding: ItemRepositoryBinding
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(repository: RepositoryAnalysis) {
            binding.apply {
                tvRepositoryName.text = repository.name
                tvRepositoryFullName.text = repository.fullName
                tvRepositoryDescription.text = repository.description ?: "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                tvRepositoryUrl.text = repository.url
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                tvStars.text = "‚≠ê ${repository.stars}"
                tvForks.text = "üîÄ ${repository.forks}"
                tvOpenIssues.text = "üìù ${repository.openIssues}"
                
                // –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                val languagesText = if (repository.languages.isNotEmpty()) {
                    repository.languages.entries
                        .sortedByDescending { it.value }
                        .take(3)
                        .joinToString(", ") { "${it.key} (${it.value}%)" }
                } else {
                    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
                }
                tvLanguages.text = "üîß $languagesText"
                
                // –†–∞–∑–º–µ—Ä –∏ –¥–∞—Ç—ã
                tvSize.text = "üì¶ ${repository.size} KB"
                tvLastUpdated.text = "üîÑ ${repository.lastUpdated}"
                tvCreatedAt.text = "üìÖ ${repository.createdAt}"
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                tvIsPrivate.text = if (repository.isPrivate) "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" else "üåê –ü—É–±–ª–∏—á–Ω—ã–π"
                tvHasWiki.text = if (repository.hasWiki) "üìö Wiki" else ""
                tvHasPages.text = if (repository.hasPages) "üåê Pages" else ""
                
                // –°—Ç—Ä—É–∫—Ç—É—Ä–∞
                tvTotalFiles.text = "üìÅ ${repository.structure.totalFiles} —Ñ–∞–π–ª–æ–≤"
                tvDirectories.text = "üìÇ ${repository.structure.directories.take(3).joinToString(", ")}"
                
                // –ö–æ–º–º–∏—Ç—ã
                tvTotalCommits.text = "üíæ ${repository.commitStats.totalCommits} –∫–æ–º–º–∏—Ç–æ–≤"
                tvLastCommit.text = "üîÑ ${repository.commitStats.lastCommitDate}"
                
                // README preview
                repository.structure.readmeContent?.let { readme ->
                    tvReadmePreview.text = if (readme.length > 100) {
                        "${readme.take(100)}..."
                    } else {
                        readme
                    }
                    tvReadmePreview.visibility = android.view.View.VISIBLE
                } ?: run {
                    tvReadmePreview.visibility = android.view.View.GONE
                }
                
                // –õ–∏—Ü–µ–Ω–∑–∏—è
                repository.license?.let { license ->
                    tvLicense.text = "üìÑ $license"
                    tvLicense.visibility = android.view.View.VISIBLE
                } ?: run {
                    tvLicense.visibility = android.view.View.GONE
                }
                
                // –¢–æ–ø–∏–∫–∏
                if (repository.topics.isNotEmpty()) {
                    tvTopics.text = "üè∑Ô∏è ${repository.topics.take(5).joinToString(", ")}"
                    tvTopics.visibility = android.view.View.VISIBLE
                } else {
                    tvTopics.visibility = android.view.View.GONE
                }
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                root.setOnClickListener {
                    onRepositoryClick(repository)
                }
            }
        }
    }
}
