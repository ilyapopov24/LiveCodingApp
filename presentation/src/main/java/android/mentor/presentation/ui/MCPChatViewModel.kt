package android.mentor.presentation.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import android.mentor.domain.entities.MCPChatMessage
import android.mentor.domain.repository.MCPRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MCPChatViewModel @Inject constructor(
    private val mcpRepository: MCPRepository
) : ViewModel() {

    private val _chatMessages = MutableStateFlow<List<MCPChatMessage>>(emptyList())
    val chatMessages: StateFlow<List<MCPChatMessage>> = _chatMessages.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _isConnected = MutableStateFlow(false)
    val isConnected: StateFlow<Boolean> = _isConnected.asStateFlow()

    init {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini API
        mcpRepository.initializeGemini()
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        connectToMCPServer()
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        viewModelScope.launch {
            mcpRepository.getConnectionStatus().collect { connected ->
                _isConnected.value = connected
                if (connected) {
                    addSystemMessage("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
                } else {
                    addSystemMessage("‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞")
                }
            }
        }
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
        viewModelScope.launch {
            mcpRepository.getLastResponse().collect { response ->
                response?.let { 
                    if (it.isNotEmpty()) {
                        addMCPResponse(it)
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Gemini
        if (mcpRepository.isGeminiInitialized()) {
            addSystemMessage("‚úÖ Gemini API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        } else {
            addSystemMessage("‚ö†Ô∏è Gemini API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }
    }

    fun sendMessage(message: String) {
        if (message.isBlank()) return
        
        viewModelScope.launch {
            _isLoading.value = true
            
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                val userMessage = MCPChatMessage(
                    id = System.currentTimeMillis().toString(),
                    content = message,
                    isUser = true,
                    timestamp = System.currentTimeMillis(),
                    model = "user"
                )
                _chatMessages.value = _chatMessages.value + userMessage
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                addSystemMessage("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Gemini...")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                val resultMessage = mcpRepository.sendMessage(message)
                if (!resultMessage.isError) {
                    addSystemMessage("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã–ø–æ–ª–Ω—è—é GitHub –æ–ø–µ—Ä–∞—Ü–∏—é...")
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç GitHub –æ–ø–µ—Ä–∞—Ü–∏–∏
                    _chatMessages.value = _chatMessages.value + resultMessage
                } else {
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
                    _chatMessages.value = _chatMessages.value + resultMessage
                }
                
            } catch (e: Exception) {
                addSystemMessage("‚ùå –û—à–∏–±–∫–∞: ${e.message}")
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun connectToMCPServer() {
        mcpRepository.connectToMCPServer()
    }

    fun disconnectFromMCPServer() {
        mcpRepository.disconnectFromMCPServer()
    }

    fun clearChatHistory() {
        _chatMessages.value = emptyList()
    }
    
    fun isConnected(): Boolean = _isConnected.value

    private fun addSystemMessage(content: String) {
        val systemMessage = MCPChatMessage(
            id = System.currentTimeMillis().toString(),
            content = content,
            isUser = false,
            timestamp = System.currentTimeMillis(),
            model = "system"
        )
        _chatMessages.value = _chatMessages.value + systemMessage
    }

    private fun addMCPResponse(response: String) {
        try {
            // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
            val mcpResponse = MCPResponseDto.fromJson(response)
            
            val content = when {
                mcpResponse.error != null -> "‚ùå –û—à–∏–±–∫–∞ MCP: ${mcpResponse.error.message}"
                mcpResponse.result != null -> "‚úÖ ${mcpResponse.result.content}"
                else -> "üìÑ –û—Ç–≤–µ—Ç MCP: $response"
            }
            
            val mcpMessage = MCPChatMessage(
                id = System.currentTimeMillis().toString(),
                content = content,
                isUser = false,
                timestamp = System.currentTimeMillis(),
                model = "mcp-server"
            )
            
            _chatMessages.value = _chatMessages.value + mcpMessage
            
        } catch (e: Exception) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            val mcpMessage = MCPChatMessage(
                id = System.currentTimeMillis().toString(),
                content = "üìÑ –û—Ç–≤–µ—Ç MCP: $response",
                isUser = false,
                timestamp = System.currentTimeMillis(),
                model = "mcp-server"
            )
            
            _chatMessages.value = _chatMessages.value + mcpMessage
        }
    }

    override fun onCleared() {
        super.onCleared()
        disconnectFromMCPServer()
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ MCP –æ—Ç–≤–µ—Ç–æ–≤
data class MCPResponseDto(
    val jsonrpc: String,
    val id: Long,
    val result: MCPResultDto?,
    val error: MCPErrorDto?
) {
    companion object {
        fun fromJson(json: String): MCPResponseDto {
            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return try {
                val jsonObject = org.json.JSONObject(json)
                MCPResponseDto(
                    jsonrpc = jsonObject.optString("jsonrpc", "2.0"),
                    id = jsonObject.optLong("id", 0),
                    result = null, // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    error = null   // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                )
            } catch (e: Exception) {
                MCPResponseDto("2.0", 0, null, null)
            }
        }
    }
}

data class MCPResultDto(
    val content: String,
    val type: String
)

data class MCPErrorDto(
    val code: Int,
    val message: String
)
