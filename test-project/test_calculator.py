#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—É–ª—Å—ã test-python-code
–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

def add_numbers(a: float, b: float) -> float:
    """–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞"""
    return a + b

def multiply_numbers(a: float, b: float) -> float:
    """–£–º–Ω–æ–∂–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞"""
    return a * b

def is_even(number: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º"""
    return number % 2 == 0

def calculate_factorial(n: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞"""
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def find_max(numbers: list) -> float:
    """–ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ"""
    if not numbers:
        raise ValueError("–°–ø–∏—Å–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    return max(numbers)

if __name__ == "__main__":
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:")
    print(f"add_numbers(5, 3) = {add_numbers(5, 3)}")
    print(f"multiply_numbers(4, 7) = {multiply_numbers(4, 7)}")
    print(f"is_even(10) = {is_even(10)}")
    print(f"is_even(7) = {is_even(7)}")
    print(f"calculate_factorial(5) = {calculate_factorial(5)}")
    print(f"find_max([1, 5, 3, 9, 2]) = {find_max([1, 5, 3, 9, 2])}")




