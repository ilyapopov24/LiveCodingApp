#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—É–ª—Å—ã test-python-code –Ω–∞ –Ω–∞—É—á–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('/app/src')

try:
    from python_runner_mcp_server import PythonRunnerMCPServer
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python Runner MCP Server...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
    server = PythonRunnerMCPServer()
    
    print("‚úÖ MCP Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É–ª—Å—ã: {len(server.list_tools())}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç—É–ª—Å–æ–≤
    for tool in server.list_tools():
        print(f"  - {tool['name']}: {tool['description']}")
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—É–ª—Å—É test-python-code –Ω–∞ –ù–ê–£–ß–ù–û–ú –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ï...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—É–ª—Å—É test-python-code –Ω–∞ —Å–ª–æ–∂–Ω–æ–º —Ñ–∞–π–ª–µ
    result = server.call_tool("test-python-code", {
        "file_path": "/host/test-project/scientific_calculator.py"
    })
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—É–ª—Å—ã:")
    print("=" * 60)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if "content" in result and result["content"]:
        for content in result["content"]:
            if content.get("type") == "text":
                print(content["text"])
    else:
        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        print(result)
    
    print("=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
except Exception as e:
    print(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    import traceback
    traceback.print_exc()



