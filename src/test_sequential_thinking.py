#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è Sequential Thinking MCP Server
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sequential_thinking_mcp_server import SequentialThinkingMCPServer

def test_sequential_thinking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª sequential thinking"""
    
    server = SequentialThinkingMCPServer()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sequential Thinking MCP Server")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –≠—Ç–∞–ø "thought"
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ 'thought':")
    result1 = server.call_tool("sequential-thinking", {
        "thought": "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º",
        "stage": "thought",
        "problem": "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
    })
    print(result1["content"][0]["text"])
    
    # –¢–µ—Å—Ç 2: –≠—Ç–∞–ø "validation"
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ 'validation':")
    result2 = server.call_tool("sequential-thinking", {
        "thought": "–ê–ª–≥–æ—Ä–∏—Ç–º A –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏",
        "stage": "validation",
        "problem": "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
        "validation_result": "–ü—Ä–æ–≤–µ—Ä–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é - –∞–ª–≥–æ—Ä–∏—Ç–º A –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ 30%"
    })
    print(result2["content"][0]["text"])
    
    # –¢–µ—Å—Ç 3: –≠—Ç–∞–ø "answer"
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ 'answer':")
    result3 = server.call_tool("sequential-thinking", {
        "thought": "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º A —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "stage": "answer",
        "problem": "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
        "final_answer": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º A —Å LRU –∫—ç—à–µ–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 30% –ø—Ä–∏—Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    })
    print(result3["content"][0]["text"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    print(f"\nüìä –ò—Å—Ç–æ—Ä–∏—è –º—ã—Å–ª–µ–π: {len(server.thought_history)} –∑–∞–ø–∏—Å–µ–π")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def test_tool_listing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    server = SequentialThinkingMCPServer()
    
    print("\nüîß –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    tools = server.list_tools()
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
    for tool in tools:
        print(f"- {tool['name']}: {tool['description']}")
    
    print("‚úÖ –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω!")

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    
    server = SequentialThinkingMCPServer()
    
    print("\n‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
    
    try:
        # –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        server.call_tool("unknown-tool", {})
        print("‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω exception")
    except ValueError as e:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
    
    try:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø
        server.call_tool("sequential-thinking", {
            "thought": "–¢–µ—Å—Ç",
            "stage": "invalid-stage",
            "problem": "–¢–µ—Å—Ç"
        })
        print("‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω exception")
    except ValueError as e:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!")

if __name__ == "__main__":
    test_sequential_thinking()
    test_tool_listing()
    test_error_handling()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")



